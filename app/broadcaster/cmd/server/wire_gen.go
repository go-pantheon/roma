// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-pantheon/fabrica-net/http/health"
	"github.com/go-pantheon/roma/app/broadcaster/internal/app/broadcaster/biz"
	"github.com/go-pantheon/roma/app/broadcaster/internal/app/broadcaster/domain"
	"github.com/go-pantheon/roma/app/broadcaster/internal/app/broadcaster/service"
	"github.com/go-pantheon/roma/app/broadcaster/internal/conf"
	"github.com/go-pantheon/roma/app/broadcaster/internal/core"
	"github.com/go-pantheon/roma/app/broadcaster/internal/data"
	"github.com/go-pantheon/roma/app/broadcaster/internal/server"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(srv *conf.Server, label *conf.Label, registry *conf.Registry, dataConf *conf.Data, logger log.Logger, health2 *health.Server) (*kratos.App, func(), error) {
	universalClient, cleanup, err := data.NewRedisClient(dataConf)
	if err != nil {
		return nil, nil, err
	}
	pubSubManager := data.NewPubSubManager(universalClient, logger)
	routeTableManager, cleanup2 := core.NewRouteTableManager(universalClient)
	pubDomain := domain.NewPubDomain(pubSubManager, routeTableManager, logger)
	broadcasterUsecase := biz.NewBroadcasterUsecase(pubDomain, logger)
	broadcasterService := service.NewBroadcasterService(broadcasterUsecase, logger)
	httpServer := server.NewHTTPServer(srv, logger, broadcasterService)
	grpcServer := server.NewGRPCServer(srv, logger, broadcasterService)
	registrar, err := server.NewRegistrar(registry)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app := newApp(logger, httpServer, grpcServer, health2, label, registrar)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
