// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-pantheon/fabrica-net/http/health"
	biz2 "github.com/go-pantheon/roma/app/room/internal/app/room/admin/biz"
	data4 "github.com/go-pantheon/roma/app/room/internal/app/room/admin/data"
	domain2 "github.com/go-pantheon/roma/app/room/internal/app/room/admin/domain"
	registry4 "github.com/go-pantheon/roma/app/room/internal/app/room/admin/registry"
	service4 "github.com/go-pantheon/roma/app/room/internal/app/room/admin/service"
	"github.com/go-pantheon/roma/app/room/internal/app/room/gate/biz"
	data2 "github.com/go-pantheon/roma/app/room/internal/app/room/gate/data"
	"github.com/go-pantheon/roma/app/room/internal/app/room/gate/domain"
	registry3 "github.com/go-pantheon/roma/app/room/internal/app/room/gate/registry"
	"github.com/go-pantheon/roma/app/room/internal/app/room/gate/service"
	"github.com/go-pantheon/roma/app/room/internal/client"
	"github.com/go-pantheon/roma/app/room/internal/client/self"
	"github.com/go-pantheon/roma/app/room/internal/conf"
	"github.com/go-pantheon/roma/app/room/internal/core"
	"github.com/go-pantheon/roma/app/room/internal/data"
	"github.com/go-pantheon/roma/app/room/internal/intra/filter"
	registry2 "github.com/go-pantheon/roma/app/room/internal/intra/registry"
	service3 "github.com/go-pantheon/roma/app/room/internal/intra/service"
	"github.com/go-pantheon/roma/app/room/internal/server"
	"github.com/go-pantheon/roma/app/room/internal/server/registry"
	service2 "github.com/go-pantheon/roma/gen/app/room/service"
	"github.com/go-pantheon/roma/pkg/client/gate"
	"github.com/go-pantheon/roma/pkg/data/mongodb"
	"github.com/go-pantheon/roma/pkg/data/redisdb"
	data3 "github.com/go-pantheon/roma/pkg/universe/data"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, label *conf.Label, confRegistry *conf.Registry, confData *conf.Data, logger log.Logger, healthServer *health.Server) (*kratos.App, func(), error) {
	universalClient, cleanup, err := data.NewRedisClient(confData)
	if err != nil {
		return nil, nil, err
	}
	db := redisdb.NewRedisDB(universalClient)
	selfRouteTable := self.NewSelfRouteTable(db, confData)
	database, cleanup2, err := data.NewMongoClient(confData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	mongodbDB := mongodb.NewMongoDB(database)
	roomRepo, err := data2.NewRoomMongoRepo(mongodbDB, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	roomProtoCache := data2.NewProtoCache()
	roomDomain := domain.NewRoomDomain(roomRepo, logger, roomProtoCache)
	gateRouteTable := gate.NewGateRouteTable(db)
	discovery, err := client.NewDiscovery(confRegistry)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	conn, err := gate.NewConn(logger, gateRouteTable, discovery)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pushServiceClient := gate.NewClient(conn)
	pushRepo := data3.NewPushRepo(pushServiceClient, logger)
	manager, cleanup3 := core.NewManager(logger, selfRouteTable, roomDomain, pushRepo)
	httpFilter := filter.NewHttpFilter(manager)
	servicelessUseCase := registry.NewServicelessUseCase()
	roomUseCase := biz.NewRoomUseCase(manager, roomDomain, logger)
	roomServiceServer := service.NewRoomService(logger, roomUseCase)
	roomServices := service2.NewRoomServices(roomServiceServer)
	tunnelServiceServer := service3.NewTunnelService(logger, manager, roomServices)
	intraRegistrar := registry2.NewIntraRegistrar(tunnelServiceServer)
	serviceRegistrars := registry.NewServiceRegistrars(servicelessUseCase, intraRegistrar)
	roomRegistrar := registry3.NewRoomRegistrar(roomServiceServer)
	gateRegistrars := registry.NewGateRegistrars(roomRegistrar)
	domainRoomRepo, err := data4.NewRoomMongoRepo(mongodbDB, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	domainRoomDomain := domain2.NewRoomDomain(domainRoomRepo, logger)
	bizRoomUseCase := biz2.NewRoomUseCase(manager, domainRoomDomain, logger)
	roomAdminServer := service4.NewRoomAdmin(logger, bizRoomUseCase)
	registryRoomRegistrar := registry4.NewRoomRegistrar(roomAdminServer)
	adminRegistrars := registry.NewAdminRegistrars(registryRoomRegistrar)
	httpServer := server.NewHTTPServer(confServer, logger, httpFilter, serviceRegistrars, gateRegistrars, adminRegistrars)
	grpcFilter := filter.NewGrpcFilter(manager)
	grpcServer := server.NewGRPCServer(confServer, logger, grpcFilter, serviceRegistrars, adminRegistrars)
	registrar, err := server.NewRegistrar(confRegistry)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app := newApp(logger, httpServer, grpcServer, healthServer, label, registrar)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
