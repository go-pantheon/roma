package base

import (
	"bytes"
	"text/template"

	"github.com/vulcan-frame/vulcan-game/vulcan/app/gamedata/internal/parser/sheet"
)

var tableBaseTemplate = `
{{- /* delete empty line */ -}}
// Code generated by gen-gamedata. DO NOT EDIT.

package {{.Package}}

import (
	"os"
	"path/filepath"

	jsoniter "github.com/json-iterator/go"
	"github.com/pkg/errors"
)

// {{.Struct}}s {{.TablePath}}
type {{.Struct}}s struct {
	DataBases []*{{.Struct}}
}

// {{.Struct}} {{.TablePath}}
type {{.Struct}} struct {
	{{.IdField.Name}} {{.IdField.Type}} // {{.IdField.Comment}}
	{{- range .Fields }}
	{{.Name}} {{.Type}} // {{.Comment}}
	{{- end }}

	{{- if .Sub }}
	SubDatas []*{{.SubStruct}}
	{{- end }}
}

{{- if .Sub }}
// {{.SubStruct}} {{.TablePath}}
type {{.SubStruct}} struct {
	{{.SubIdField.Name}} {{.SubIdField.Type}} // {{.SubIdField.Comment}}
	{{- range .SubFields }}
	{{.Name}} {{.Type}} // {{.Comment}}
	{{- end }}
}
{{- end }}

func (d *{{.Struct}}s) Table() string {
	return "{{.TablePath}}"
}

func (d *{{.Struct}}) Table() string {
	return "{{.TablePath}}"
}

{{ if .Sub }}
func (d *{{.SubStruct}}) Table() string {
	return "{{.TablePath}}"
}
{{ end }}

func Load{{.Struct}}s(filename string) *{{.Struct}}s {
	filename = filepath.FromSlash(filename)

	json, err := os.ReadFile(filename)
	if err != nil {
		panic(errors.Wrapf(err, "Load json failed. file=%s", filename))
	}

	baseList := []{{.Struct}}{}
	err = jsoniter.Unmarshal(json, &baseList)
	if err != nil {
		panic(errors.Wrapf(err, "Unmarshal json failed. file=%s", filename))
	}

	datas := &{{.Struct}}s{}

	for _, base := range baseList {
		datas.DataBases = append(datas.DataBases, &base)
	}
	
	return datas
}

func (d *{{.Struct}}) Id() int64 {
	return d.{{.IdField.Name}}
}

{{ if .Sub }}
func (d *{{.SubStruct}}) Id() int64 {
	return d.{{.SubIdField.Name}}
}
{{ end }}
`

type TableService struct {
	*service
}

func NewTableService(sh sheet.Sheet) (*TableService, error) {
	s, err := newService(sh)
	if err != nil {
		return nil, err
	}
	return &TableService{s}, nil
}

func (s *TableService) Execute() ([]byte, error) {
	buf := new(bytes.Buffer)

	tmpl, err := template.New("table_base").Parse(tableBaseTemplate)
	if err != nil {
		return nil, err
	}
	if err = tmpl.Execute(buf, s); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
