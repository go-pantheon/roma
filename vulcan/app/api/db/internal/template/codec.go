package template

import (
	"text/template"

	"github.com/go-pantheon/fabrica-util/camelcase"
	"github.com/go-pantheon/fabrica-util/errors"
)

const codecTemplate = `
{{- /* delete empty line */ -}}
// Code generated by gen-api-db. DO NOT EDIT.

package {{ .Package }}

import (
	"github.com/go-pantheon/fabrica-util/errors"
	"github.com/go-pantheon/roma/pkg/universe/life"
	"google.golang.org/protobuf/proto"
)

{{- range .Messages }}

{{- $msgName := .Name | ToUpperCamel }}

{{ if .HasOneof }}
	{{- range .Fields }}
	  {{- $filedName := .Name | ToUpperCamel }}
		{{- if .IsOneof }}
			func Encode{{ $msgName }}(module life.Module) (*{{ $msgName }}, error) {
				p := module.EncodeServer()
				mp := {{ $msgName }}Pool.Get()

				encoder, ok := p.({{ $msgName | ToLowerCamel }}Encoder)
				if !ok {
					return nil, errors.Errorf("{{ $msgName }} encode invalid type: %T", module)
				}

				mp.Module = encoder.Wrap()
				
				return mp, nil
			}

			func Decode{{ $msgName }}(p *{{ $msgName }}, module life.Module) error {
				if p.Module == nil {
					return errors.New("{{ $msgName }}.Module is nil")
				}

				decoder, ok := p.Module.({{ $msgName | ToLowerCamel }}Decoder)
				if !ok {
					return errors.Errorf("{{ $msgName }} decode invalid type: %T", p.Module)
				}

				return module.DecodeServer(decoder.Unwrap())
			}

			type {{ $msgName | ToLowerCamel }}Encoder interface {
				Wrap() is{{ $msgName }}_Module
			}

			type {{ $msgName | ToLowerCamel }}Decoder interface {
				Unwrap() proto.Message
			}

			{{- range .OneofElements }}
			func (x *{{ .Type }}) Wrap() is{{ $msgName }}_Module {
				return &{{ $msgName }}_{{ .Name | ToUpperCamel }} {
				  {{ .Name | ToUpperCamel }}: x,
				}
			}

			func (x *{{ $msgName }}_{{ .Name | ToUpperCamel }}) Unwrap() proto.Message {
				return x.{{ .Name | ToUpperCamel }}
			}
			{{ end }}
		{{- end }}
	{{ end }}	 
{{- end }}

{{- end }}
`

type CodecService struct {
}

func NewCodecTemplate() (*template.Template, error) {
	tmpl, err := template.New("protoPool").Funcs(template.FuncMap{
		"ToLowerCamel": camelcase.ToLowerCamel,
		"ToUpperCamel": camelcase.ToUpperCamel,
	}).Parse(codecTemplate)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to parse template")
	}

	return tmpl, nil
}
