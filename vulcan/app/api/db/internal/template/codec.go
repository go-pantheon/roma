package template

import (
	"text/template"

	"github.com/go-pantheon/fabrica-util/camelcase"
	"github.com/go-pantheon/fabrica-util/errors"
)

const codecTemplate = `
{{- /* delete empty line */ -}}
// Code generated by gen-api-db. DO NOT EDIT.

package {{ .Package }}

import (
	"github.com/go-pantheon/fabrica-util/errors"
	"github.com/go-pantheon/roma/pkg/universe/life"
	"go.mongodb.org/mongo-driver/v2/bson"
)

{{- range .Messages }}

{{- $msgName := .Name | ToUpperCamel }}

{{ if .HasOneof }}
	{{- range .Fields }}
	  {{- $filedName := .Name | ToUpperCamel }}
		{{- if .IsOneof }}
			func Encode{{ $msgName }}(module life.Module) *{{ $msgName }} {
				p := module.EncodeServer()
        
				switch p.(type) {
				{{- range .OneofElements }}
				case *{{ .Type }}:
					return p.(*{{ .Type }}).Wrap()
				{{- end }}
				default:
					return nil
	      }
			}

			func Decode{{ $msgName }}(p *{{ $msgName }}, module life.Module) error {
				if p.Module == nil {
					return nil
				}

				switch p.Module.(type) {
				{{- range .OneofElements }}
				case *{{ $msgName }}_{{ .Name | ToUpperCamel }}:
					return module.DecodeServer(p.Get{{ .Name | ToUpperCamel }}())
				{{- end }}
				default:
					return errors.Errorf("{{ $msgName }} decode invalid type: %T", p.Module)
				}
			}

			{{ range .OneofElements }}
			func (x *{{ .Type }}) Wrap() *{{ $msgName }} {
				mp := {{ $msgName }}Pool.Get{{ .Name | ToUpperCamel }}()
				mp.Module.(*{{ $msgName }}_{{ .Name | ToUpperCamel }}).{{ .Name | ToUpperCamel }} = x

				return mp
			}
			{{ end }}

			// UnmarshalBSON implements the bson.Unmarshaler interface for {{ $msgName }}.
			// This is required to handle the 'oneof' field when decoding from MongoDB.
			func (x *{{ $msgName }}) UnmarshalBSON(data []byte) error {
				var m bson.M
				if err := bson.Unmarshal(data, &m); err != nil {
					return err
				}

				for key, value := range m {
					// Marshal the value back to BSON to be unmarshaled into the target struct.
					valData, err := bson.Marshal(value)
					if err != nil {
						return errors.Wrapf(err, "failed to marshal value for key %s", key)
					}

					switch key {
					{{- range .OneofElements }}
					case "{{ .Name }}":
						{{ .Name }} := {{ .Type }}Pool.Get()
						if err := bson.Unmarshal(valData, {{ .Name }}); err != nil {
							return err
						}

						mp := {{ $msgName | ToLowerCamel }}{{ .Name | ToUpperCamel }}Pool.get()
						mp.{{ .Name | ToUpperCamel }} = {{ .Name }}
						x.{{ $filedName }} = mp
					{{- end }}
					}
					// Assuming there is only one field in the 'oneof'
					if x.{{ $filedName }} != nil {
						break
					}
				}
				return nil
			}
		{{- end }}
	{{ end }}	 
{{- end }}
{{- end }}
`

type CodecService struct {
}

func NewCodecTemplate() (*template.Template, error) {
	tmpl, err := template.New("protoPool").Funcs(template.FuncMap{
		"ToLowerCamel": camelcase.ToLowerCamel,
		"ToUpperCamel": camelcase.ToUpperCamel,
	}).Parse(codecTemplate)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to parse template")
	}

	return tmpl, nil
}
