package service

import (
	"bytes"
	"text/template"

	"github.com/go-pantheon/fabrica-util/camelcase"
	"github.com/go-pantheon/roma/vulcan/pkg/compilers"
)

var serviceTemplate = `
{{- /* delete empty line */ -}}
// Code generated by gen-api-client. DO NOT EDIT.

package service

import (
	"github.com/google/wire"
	"{{.Project}}/roma/gen/api/client/message"
)

var {{.Group}}ServicesProviderSet = wire.NewSet(
	New{{.Group}}Services,
)

type {{.Group}}Services struct {
	{{- range .Mods }}
	{{.UpperCamel}} climsg.{{.UpperCamel}}ServiceServer
	{{- end }}
}

func New{{.Group}}Services(
	{{- range .Mods }}
	{{.UpperCamel}} climsg.{{.UpperCamel}}ServiceServer,
	{{- end }}
) *{{.Group}}Services {
	s := &{{.Group}}Services{}
	{{- range .Mods }}
	s.{{.UpperCamel}} = {{.UpperCamel}}
	{{- end }}

	return s
}
`

type SvcService struct {
	Project string
	Group   string
	Mods    []*Mod
}

func NewSvcService(project string, c *compilers.ModsCompiler) *SvcService {
	s := &SvcService{
		Project: project,
	}
	s.Group = camelcase.ToUpperCamel(string(c.Group))
	s.Mods = make([]*Mod, 0, len(s.Mods))

	for _, mod := range c.Mods {
		modStr := string(mod)
		s.Mods = append(s.Mods, &Mod{
			LowerCamel: modStr,
			UpperCamel: camelcase.ToUpperCamel(modStr),
		})
	}
	return s
}

type Mod struct {
	UpperCamel string
	LowerCamel string
}

func (s *SvcService) Execute() ([]byte, error) {
	buf := new(bytes.Buffer)

	tmpl, err := template.New("service").Parse(serviceTemplate)
	if err != nil {
		return nil, err
	}
	if err = tmpl.Execute(buf, s); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
