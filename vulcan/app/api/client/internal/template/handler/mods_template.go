package handler

import (
	"bytes"
	"text/template"

	"github.com/go-pantheon/roma/vulcan/pkg/compilers"
	"github.com/go-pantheon/fabrica-util/camelcase"
)

var modTemplate = `
{{- /* delete empty line */ -}}
// Code generated by gen-api-client. DO NOT EDIT.

package handler

import (
	"context"
	"google.golang.org/protobuf/proto"
	"{{.Project}}/gen/api/client/message"
	"{{.Project}}/gen/api/client/sequence"
	"{{.Project}}/gen/app/codec"
	"{{.Project}}/gen/app/{{.LowerGroup}}/service"
	"github.com/pkg/errors"
)

func handle{{.UpperCamelMod}}(ctx context.Context, s *service.{{.Group}}Services, mod, seq int32, obj int64, in []byte) ([]byte, error) {
	cs, err := codec.UnmarshalCS{{.UpperCamelMod}}(seq, in)
	if err != nil {
		return nil, err
	}

	var (
		sc  proto.Message
	)

	{{- $upperMod := .UpperCamelMod}}
	switch cliseq.{{$upperMod}}Seq(seq) {
	{{- range .Apis }}
	{{- if .CS }}

	// {{.Comment}}
	case cliseq.{{$upperMod}}Seq_{{.UpperCamelName}}:
		sc, err = s.{{$upperMod}}.{{.UpperCamelName}}(ctx, cs.(*climsg.{{.CS}}))
	{{- end }}
	{{- end }}

	default:
		return nil, errors.Errorf("seq not found. mod=%s seq=%d", "{{.UpperCamelMod}}", seq)
	}

	out, err0 := New{{.Group}}Response(mod, seq, obj, sc)
	if err0 != nil {
		return nil, errors.Wrapf(err0, "proto marshal failed. mod=%s seq=%d", "{{.UpperCamelMod}}", seq)
	}
	return out, err
}
`

type ModService struct {
	Project       string
	UpperCamelMod string

	Group      string
	LowerGroup string

	Apis []*compilers.Api
}

func NewModService(project string, mod compilers.ModType, c *compilers.SeqCompiler) *ModService {
	s := &ModService{
		Project: project,
	}

	s.UpperCamelMod = camelcase.ToUpperCamel(string(mod))
	s.Group = camelcase.ToUpperCamel(string(c.Group))
	s.LowerGroup = camelcase.ToLowerCamel(string(c.Group))
	s.Apis = c.Apis
	return s
}

func (s *ModService) Execute() ([]byte, error) {
	buf := new(bytes.Buffer)

	tmpl, err := template.New("handler_mods").Parse(modTemplate)
	if err != nil {
		return nil, err
	}
	if err = tmpl.Execute(buf, s); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
