package base

import (
	"bytes"
	"text/template"

	"github.com/go-pantheon/roma/vulcan/app/gamedata/internal/parser/sheet"
)

var kvBaseTemplate = `
{{- /* delete empty line */ -}}
// Code generated by gen-data-base. DO NOT EDIT.

package {{.Package}}

import (
	"os"
	"path/filepath"

	"{{.Org}}/fabrica-util/errors"
	jsoniter "github.com/json-iterator/go"
)

// {{.Struct}} {{.TablePath}}
type {{.Struct}} struct {
	{{- range .Fields }}
	{{.Name}} {{.Type}} // {{.Comment}}
	{{- end }}
}

func (d *{{.Struct}}) Table() string {
	return "{{.TablePath}}"
}

func Load{{.Struct}}(filename string) *{{.Struct}} {
	filename = filepath.FromSlash(filename)

	json, err := os.ReadFile(filename)
	if err != nil {
		panic(errors.Wrapf(err, "Load json failed. file=%s", filename))
	}

	data := {{.Struct}}{}
	err = jsoniter.Unmarshal(json, &data)
	if err != nil {
		panic(errors.Wrapf(err, "Unmarshal json failed. file=%s", filename))
	}

	return &data
}

func (d *{{.Struct}}) Id() int64 {
	return 0
}

`

type KvService struct {
	*service
}

func NewKvService(project string, sh sheet.Sheet) *KvService {
	return &KvService{newService(project, sh)}
}

func (s *KvService) Execute() ([]byte, error) {
	buf := new(bytes.Buffer)

	tmpl, err := template.New("kv_base").Parse(kvBaseTemplate)
	if err != nil {
		return nil, err
	}

	if err = tmpl.Execute(buf, s); err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}
