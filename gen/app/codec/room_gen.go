// Code generated by gen-api. DO NOT EDIT.

package codec

import (
	"strings"

	"github.com/pkg/errors"
	"google.golang.org/protobuf/proto"
	climsg "github.com/vulcan-frame/vulcan-game/gen/api/client/message"
	cliseq "github.com/vulcan-frame/vulcan-game/gen/api/client/sequence"
)

func UnmarshalCSRoom(seq int32, data []byte) (p proto.Message, err error) {
	switch cliseq.RoomSeq(seq) {
	// Room list
	case cliseq.RoomSeq_RoomList:
		pp := &climsg.CSRoomList{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Room detail
	case cliseq.RoomSeq_RoomDetail:
		pp := &climsg.CSRoomDetail{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Create room
	case cliseq.RoomSeq_CreateRoom:
		pp := &climsg.CSCreateRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Invite to join room
	case cliseq.RoomSeq_InviteToJoinRoom:
		pp := &climsg.CSInviteToJoinRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Agree to invite to join room
	case cliseq.RoomSeq_AgreeToInviteJoinRoom:
		pp := &climsg.CSAgreeToInviteJoinRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Request to join room
	case cliseq.RoomSeq_RequestToJoinRoom:
		pp := &climsg.CSRequestToJoinRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Approve request to join room
	case cliseq.RoomSeq_ApproveRequestToJoinRoom:
		pp := &climsg.CSApproveRequestToJoinRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Kick user from room
	case cliseq.RoomSeq_KickUserFromRoom:
		pp := &climsg.CSKickUserFromRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Close room
	case cliseq.RoomSeq_CloseRoom:
		pp := &climsg.CSCloseRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Leave room
	case cliseq.RoomSeq_LeaveRoom:
		pp := &climsg.CSLeaveRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp

	default:
		err = errors.Errorf("Unmarshal CSRoom faild. sequence not found. seq=%d", seq)
		return
	}

	if err != nil {
		return nil, errors.Wrapf(err, "Unmarshal CSRoom faild. seq=%d", seq)
	}
	return
}

func UnmarshalSCRoom(seq int32, data []byte) (p proto.Message, err error) {
	switch cliseq.RoomSeq(seq) {
	// Room list
	case cliseq.RoomSeq_RoomList:
		pp := &climsg.SCRoomList{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Room detail
	case cliseq.RoomSeq_RoomDetail:
		pp := &climsg.SCRoomDetail{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Create room
	case cliseq.RoomSeq_CreateRoom:
		pp := &climsg.SCCreateRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Invite to join room
	case cliseq.RoomSeq_InviteToJoinRoom:
		pp := &climsg.SCInviteToJoinRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Agree to invite to join room
	case cliseq.RoomSeq_AgreeToInviteJoinRoom:
		pp := &climsg.SCAgreeToInviteJoinRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Request to join room
	case cliseq.RoomSeq_RequestToJoinRoom:
		pp := &climsg.SCRequestToJoinRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Approve request to join room
	case cliseq.RoomSeq_ApproveRequestToJoinRoom:
		pp := &climsg.SCApproveRequestToJoinRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// @push joined room
	case cliseq.RoomSeq_PushJoinedRoom:
		pp := &climsg.SCPushJoinedRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Kick user from room
	case cliseq.RoomSeq_KickUserFromRoom:
		pp := &climsg.SCKickUserFromRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Close room
	case cliseq.RoomSeq_CloseRoom:
		pp := &climsg.SCCloseRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Leave room
	case cliseq.RoomSeq_LeaveRoom:
		pp := &climsg.SCLeaveRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// @push Removed from room. Leave, be kicked or room closed
	case cliseq.RoomSeq_PushRemovedFromRoom:
		pp := &climsg.SCPushRemovedFromRoom{}
		err = proto.Unmarshal(data, pp)
		p = pp

	default:
		err = errors.Errorf("Unmarshal SCRoom faild. sequence not found. seq=%d", seq)
		return
	}

	if err != nil {
		return nil, errors.Wrapf(err, "Unmarshal SCRoom faild. seq=%d", seq)
	}
	return
}

func IsPushSCRoom(seq int32) bool {
	name := cliseq.RoomSeq_name[seq]
	return strings.Index(name, "Push_") == 0
}
