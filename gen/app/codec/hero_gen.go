// Code generated by gen-api. DO NOT EDIT.

package codec

import (
	"strings"

	"github.com/pkg/errors"
	"google.golang.org/protobuf/proto"
	climsg "github.com/go-pantheon/roma/gen/api/client/message"
	cliseq "github.com/go-pantheon/roma/gen/api/client/sequence"
)

func UnmarshalCSHero(seq int32, data []byte) (p proto.Message, err error) {
	switch cliseq.HeroSeq(seq) {
	// Hero level upgrade
	case cliseq.HeroSeq_HeroLevelUpgrade:
		pp := &climsg.CSHeroLevelUpgrade{}
		err = proto.Unmarshal(data, pp)
		p = pp

	default:
		err = errors.Errorf("Unmarshal CSHero faild. sequence not found. seq=%d", seq)
		return
	}

	if err != nil {
		return nil, errors.Wrapf(err, "Unmarshal CSHero faild. seq=%d", seq)
	}
	return
}

func UnmarshalSCHero(seq int32, data []byte) (p proto.Message, err error) {
	switch cliseq.HeroSeq(seq) {
	// @push Hero unlock
	case cliseq.HeroSeq_PushHeroUnlock:
		pp := &climsg.SCPushHeroUnlock{}
		err = proto.Unmarshal(data, pp)
		p = pp
	// Hero level upgrade
	case cliseq.HeroSeq_HeroLevelUpgrade:
		pp := &climsg.SCHeroLevelUpgrade{}
		err = proto.Unmarshal(data, pp)
		p = pp

	default:
		err = errors.Errorf("Unmarshal SCHero faild. sequence not found. seq=%d", seq)
		return
	}

	if err != nil {
		return nil, errors.Wrapf(err, "Unmarshal SCHero faild. seq=%d", seq)
	}
	return
}

func IsPushSCHero(seq int32) bool {
	name := cliseq.HeroSeq_name[seq]
	return strings.Index(name, "Push_") == 0
}
