// Code generated by gen-data-base. DO NOT EDIT.

package resource

import (
	"os"
	"path/filepath"

	"github.com/go-pantheon/fabrica-util/errors"
	jsoniter "github.com/json-iterator/go"
)

// ItemDataBaseGens excel/Resource/item.xlsx:Item
type ItemDataBaseGens struct {
	DataBases []*ItemDataBaseGen
}

// ItemDataBaseGen excel/Resource/item.xlsx:Item
type ItemDataBaseGen struct {
	ID            int64   // ID
	Name          string  // Name
	ItemTypeInt   uint64  // Type
	ValueStr      uint64  // Value
	QualityInt    uint64  // Quality
	Stackable     bool    // Stackable
	RecoverPerSec float64 // Recover Per Second
	Max           uint64  // Max Amount. Unlimited if Zero
}

func (d *ItemDataBaseGens) Table() string {
	return "excel/Resource/item.xlsx:Item"
}

func (d *ItemDataBaseGen) Table() string {
	return "excel/Resource/item.xlsx:Item"
}

func LoadItemDataBaseGens(filename string) *ItemDataBaseGens {
	filename = filepath.FromSlash(filename)

	json, err := os.ReadFile(filename)
	if err != nil {
		panic(errors.Wrapf(err, "Load json failed. file=%s", filename))
	}

	baseList := []ItemDataBaseGen{}
	err = jsoniter.Unmarshal(json, &baseList)
	if err != nil {
		panic(errors.Wrapf(err, "Unmarshal json failed. file=%s", filename))
	}

	datas := &ItemDataBaseGens{}

	for _, base := range baseList {
		datas.DataBases = append(datas.DataBases, &base)
	}

	return datas
}

func (d *ItemDataBaseGen) Id() int64 {
	return d.ID
}
