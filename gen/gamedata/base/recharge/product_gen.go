// Code generated by gen-data-base. DO NOT EDIT.

package recharge

import (
	"os"
	"path/filepath"

	jsoniter "github.com/json-iterator/go"
	"github.com/pkg/errors"
)

// ProductDataBaseGens excel/Recharge/Recharge.xlsx:Product
type ProductDataBaseGens struct {
	DataBases []*ProductDataBaseGen
}

// ProductDataBaseGen excel/Recharge/Recharge.xlsx:Product
type ProductDataBaseGen struct {
	ID        int64            // ID
	Name      string           // Name
	ProductID uint64           // Platform Product ID
	Price     uint64           // Price(Cents)
	Prize     map[int64]uint64 // Prize
}

func (d *ProductDataBaseGens) Table() string {
	return "excel/Recharge/Recharge.xlsx:Product"
}

func (d *ProductDataBaseGen) Table() string {
	return "excel/Recharge/Recharge.xlsx:Product"
}

func LoadProductDataBaseGens(filename string) *ProductDataBaseGens {
	filename = filepath.FromSlash(filename)

	json, err := os.ReadFile(filename)
	if err != nil {
		panic(errors.Wrapf(err, "Load json failed. file=%s", filename))
	}

	baseList := []ProductDataBaseGen{}
	err = jsoniter.Unmarshal(json, &baseList)
	if err != nil {
		panic(errors.Wrapf(err, "Unmarshal json failed. file=%s", filename))
	}

	datas := &ProductDataBaseGens{}

	for _, base := range baseList {
		datas.DataBases = append(datas.DataBases, &base)
	}

	return datas
}

func (d *ProductDataBaseGen) Id() int64 {
	return d.ID
}
