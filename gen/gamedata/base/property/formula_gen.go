// Code generated by gen-gamedata. DO NOT EDIT.

package property

import (
	"os"
	"path/filepath"

	jsoniter "github.com/json-iterator/go"
	"github.com/pkg/errors"
)

// FormulaDataBaseGens excel/Property/Attribute.xlsx:Formula
type FormulaDataBaseGens struct {
	DataBases []*FormulaDataBaseGen
}

// FormulaDataBaseGen excel/Property/Attribute.xlsx:Formula
type FormulaDataBaseGen struct {
	ID        int64  // ID
	Attribute string // Properity Name
	Formula   string // Formula
}

func (d *FormulaDataBaseGens) Table() string {
	return "excel/Property/Attribute.xlsx:Formula"
}

func (d *FormulaDataBaseGen) Table() string {
	return "excel/Property/Attribute.xlsx:Formula"
}

func LoadFormulaDataBaseGens(filename string) *FormulaDataBaseGens {
	filename = filepath.FromSlash(filename)

	json, err := os.ReadFile(filename)
	if err != nil {
		panic(errors.Wrapf(err, "Load json failed. file=%s", filename))
	}

	baseList := []FormulaDataBaseGen{}
	err = jsoniter.Unmarshal(json, &baseList)
	if err != nil {
		panic(errors.Wrapf(err, "Unmarshal json failed. file=%s", filename))
	}

	datas := &FormulaDataBaseGens{}

	for _, base := range baseList {
		datas.DataBases = append(datas.DataBases, &base)
	}

	return datas
}

func (d *FormulaDataBaseGen) Id() int64 {
	return d.ID
}
