// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message/room.proto

package climsg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserRoomProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRoomProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRoomProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRoomProtoMultiError, or
// nil if none found.
func (m *UserRoomProto) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRoomProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return UserRoomProtoMultiError(errors)
	}

	return nil
}

// UserRoomProtoMultiError is an error wrapping multiple validation errors
// returned by UserRoomProto.ValidateAll() if the designated constraints
// aren't met.
type UserRoomProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRoomProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRoomProtoMultiError) AllErrors() []error { return m }

// UserRoomProtoValidationError is the validation error returned by
// UserRoomProto.Validate if the designated constraints aren't met.
type UserRoomProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoomProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoomProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoomProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoomProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoomProtoValidationError) ErrorName() string { return "UserRoomProtoValidationError" }

// Error satisfies the builtin error interface
func (e UserRoomProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRoomProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoomProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoomProtoValidationError{}

// Validate checks the field values on RoomProto with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomProto with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomProtoMultiError, or nil
// if none found.
func (m *RoomProto) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBasic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomProtoValidationError{
					field:  "Basic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomProtoValidationError{
					field:  "Basic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBasic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomProtoValidationError{
				field:  "Basic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]int64, len(m.GetMembers()))
		i := 0
		for key := range m.GetMembers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMembers()[key]
			_ = val

			// no validation rules for Members[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RoomProtoValidationError{
							field:  fmt.Sprintf("Members[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RoomProtoValidationError{
							field:  fmt.Sprintf("Members[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RoomProtoValidationError{
						field:  fmt.Sprintf("Members[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return RoomProtoMultiError(errors)
	}

	return nil
}

// RoomProtoMultiError is an error wrapping multiple validation errors returned
// by RoomProto.ValidateAll() if the designated constraints aren't met.
type RoomProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomProtoMultiError) AllErrors() []error { return m }

// RoomProtoValidationError is the validation error returned by
// RoomProto.Validate if the designated constraints aren't met.
type RoomProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomProtoValidationError) ErrorName() string { return "RoomProtoValidationError" }

// Error satisfies the builtin error interface
func (e RoomProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomProtoValidationError{}

// Validate checks the field values on RoomBasicProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomBasicProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomBasicProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomBasicProtoMultiError,
// or nil if none found.
func (m *RoomBasicProto) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomBasicProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoomType

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomBasicProtoValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomBasicProtoValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomBasicProtoValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return RoomBasicProtoMultiError(errors)
	}

	return nil
}

// RoomBasicProtoMultiError is an error wrapping multiple validation errors
// returned by RoomBasicProto.ValidateAll() if the designated constraints
// aren't met.
type RoomBasicProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomBasicProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomBasicProtoMultiError) AllErrors() []error { return m }

// RoomBasicProtoValidationError is the validation error returned by
// RoomBasicProto.Validate if the designated constraints aren't met.
type RoomBasicProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomBasicProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomBasicProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomBasicProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomBasicProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomBasicProtoValidationError) ErrorName() string { return "RoomBasicProtoValidationError" }

// Error satisfies the builtin error interface
func (e RoomBasicProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomBasicProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomBasicProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomBasicProtoValidationError{}

// Validate checks the field values on RoomMemberProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomMemberProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomMemberProto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomMemberProtoMultiError, or nil if none found.
func (m *RoomMemberProto) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomMemberProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomMemberProtoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomMemberProtoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomMemberProtoValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for JoinedAt

	if len(errors) > 0 {
		return RoomMemberProtoMultiError(errors)
	}

	return nil
}

// RoomMemberProtoMultiError is an error wrapping multiple validation errors
// returned by RoomMemberProto.ValidateAll() if the designated constraints
// aren't met.
type RoomMemberProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomMemberProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomMemberProtoMultiError) AllErrors() []error { return m }

// RoomMemberProtoValidationError is the validation error returned by
// RoomMemberProto.Validate if the designated constraints aren't met.
type RoomMemberProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomMemberProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomMemberProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomMemberProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomMemberProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomMemberProtoValidationError) ErrorName() string { return "RoomMemberProtoValidationError" }

// Error satisfies the builtin error interface
func (e RoomMemberProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomMemberProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomMemberProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomMemberProtoValidationError{}
