// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: message/room_service.proto

package climsg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoomService_RoomList_FullMethodName                 = "/message.RoomService/RoomList"
	RoomService_RoomDetail_FullMethodName               = "/message.RoomService/RoomDetail"
	RoomService_CreateRoom_FullMethodName               = "/message.RoomService/CreateRoom"
	RoomService_InviteToJoinRoom_FullMethodName         = "/message.RoomService/InviteToJoinRoom"
	RoomService_AgreeToInviteJoinRoom_FullMethodName    = "/message.RoomService/AgreeToInviteJoinRoom"
	RoomService_RequestToJoinRoom_FullMethodName        = "/message.RoomService/RequestToJoinRoom"
	RoomService_ApproveRequestToJoinRoom_FullMethodName = "/message.RoomService/ApproveRequestToJoinRoom"
	RoomService_KickUserFromRoom_FullMethodName         = "/message.RoomService/KickUserFromRoom"
	RoomService_LeaveRoom_FullMethodName                = "/message.RoomService/LeaveRoom"
	RoomService_CloseRoom_FullMethodName                = "/message.RoomService/CloseRoom"
)

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Room service
type RoomServiceClient interface {
	// Room List
	RoomList(ctx context.Context, in *CSRoomList, opts ...grpc.CallOption) (*SCRoomList, error)
	// Room detail
	RoomDetail(ctx context.Context, in *CSRoomDetail, opts ...grpc.CallOption) (*SCRoomDetail, error)
	// Create room
	CreateRoom(ctx context.Context, in *CSCreateRoom, opts ...grpc.CallOption) (*SCCreateRoom, error)
	// Invite to join room
	InviteToJoinRoom(ctx context.Context, in *CSInviteToJoinRoom, opts ...grpc.CallOption) (*SCInviteToJoinRoom, error)
	// Agree to invite to join room
	AgreeToInviteJoinRoom(ctx context.Context, in *CSAgreeToInviteJoinRoom, opts ...grpc.CallOption) (*SCAgreeToInviteJoinRoom, error)
	// Request to join room
	RequestToJoinRoom(ctx context.Context, in *CSRequestToJoinRoom, opts ...grpc.CallOption) (*SCRequestToJoinRoom, error)
	// Approve request to join room
	ApproveRequestToJoinRoom(ctx context.Context, in *CSApproveRequestToJoinRoom, opts ...grpc.CallOption) (*SCApproveRequestToJoinRoom, error)
	// Kick user from room
	KickUserFromRoom(ctx context.Context, in *CSKickUserFromRoom, opts ...grpc.CallOption) (*SCKickUserFromRoom, error)
	// Leave room
	LeaveRoom(ctx context.Context, in *CSLeaveRoom, opts ...grpc.CallOption) (*SCLeaveRoom, error)
	// Close room
	CloseRoom(ctx context.Context, in *CSCloseRoom, opts ...grpc.CallOption) (*SCCloseRoom, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) RoomList(ctx context.Context, in *CSRoomList, opts ...grpc.CallOption) (*SCRoomList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCRoomList)
	err := c.cc.Invoke(ctx, RoomService_RoomList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RoomDetail(ctx context.Context, in *CSRoomDetail, opts ...grpc.CallOption) (*SCRoomDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCRoomDetail)
	err := c.cc.Invoke(ctx, RoomService_RoomDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) CreateRoom(ctx context.Context, in *CSCreateRoom, opts ...grpc.CallOption) (*SCCreateRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCCreateRoom)
	err := c.cc.Invoke(ctx, RoomService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) InviteToJoinRoom(ctx context.Context, in *CSInviteToJoinRoom, opts ...grpc.CallOption) (*SCInviteToJoinRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCInviteToJoinRoom)
	err := c.cc.Invoke(ctx, RoomService_InviteToJoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) AgreeToInviteJoinRoom(ctx context.Context, in *CSAgreeToInviteJoinRoom, opts ...grpc.CallOption) (*SCAgreeToInviteJoinRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCAgreeToInviteJoinRoom)
	err := c.cc.Invoke(ctx, RoomService_AgreeToInviteJoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RequestToJoinRoom(ctx context.Context, in *CSRequestToJoinRoom, opts ...grpc.CallOption) (*SCRequestToJoinRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCRequestToJoinRoom)
	err := c.cc.Invoke(ctx, RoomService_RequestToJoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) ApproveRequestToJoinRoom(ctx context.Context, in *CSApproveRequestToJoinRoom, opts ...grpc.CallOption) (*SCApproveRequestToJoinRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCApproveRequestToJoinRoom)
	err := c.cc.Invoke(ctx, RoomService_ApproveRequestToJoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) KickUserFromRoom(ctx context.Context, in *CSKickUserFromRoom, opts ...grpc.CallOption) (*SCKickUserFromRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCKickUserFromRoom)
	err := c.cc.Invoke(ctx, RoomService_KickUserFromRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) LeaveRoom(ctx context.Context, in *CSLeaveRoom, opts ...grpc.CallOption) (*SCLeaveRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCLeaveRoom)
	err := c.cc.Invoke(ctx, RoomService_LeaveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) CloseRoom(ctx context.Context, in *CSCloseRoom, opts ...grpc.CallOption) (*SCCloseRoom, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCCloseRoom)
	err := c.cc.Invoke(ctx, RoomService_CloseRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServiceServer is the server API for RoomService service.
// All implementations must embed UnimplementedRoomServiceServer
// for forward compatibility.
//
// Room service
type RoomServiceServer interface {
	// Room List
	RoomList(context.Context, *CSRoomList) (*SCRoomList, error)
	// Room detail
	RoomDetail(context.Context, *CSRoomDetail) (*SCRoomDetail, error)
	// Create room
	CreateRoom(context.Context, *CSCreateRoom) (*SCCreateRoom, error)
	// Invite to join room
	InviteToJoinRoom(context.Context, *CSInviteToJoinRoom) (*SCInviteToJoinRoom, error)
	// Agree to invite to join room
	AgreeToInviteJoinRoom(context.Context, *CSAgreeToInviteJoinRoom) (*SCAgreeToInviteJoinRoom, error)
	// Request to join room
	RequestToJoinRoom(context.Context, *CSRequestToJoinRoom) (*SCRequestToJoinRoom, error)
	// Approve request to join room
	ApproveRequestToJoinRoom(context.Context, *CSApproveRequestToJoinRoom) (*SCApproveRequestToJoinRoom, error)
	// Kick user from room
	KickUserFromRoom(context.Context, *CSKickUserFromRoom) (*SCKickUserFromRoom, error)
	// Leave room
	LeaveRoom(context.Context, *CSLeaveRoom) (*SCLeaveRoom, error)
	// Close room
	CloseRoom(context.Context, *CSCloseRoom) (*SCCloseRoom, error)
	mustEmbedUnimplementedRoomServiceServer()
}

// UnimplementedRoomServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoomServiceServer struct{}

func (UnimplementedRoomServiceServer) RoomList(context.Context, *CSRoomList) (*SCRoomList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomList not implemented")
}
func (UnimplementedRoomServiceServer) RoomDetail(context.Context, *CSRoomDetail) (*SCRoomDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomDetail not implemented")
}
func (UnimplementedRoomServiceServer) CreateRoom(context.Context, *CSCreateRoom) (*SCCreateRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomServiceServer) InviteToJoinRoom(context.Context, *CSInviteToJoinRoom) (*SCInviteToJoinRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToJoinRoom not implemented")
}
func (UnimplementedRoomServiceServer) AgreeToInviteJoinRoom(context.Context, *CSAgreeToInviteJoinRoom) (*SCAgreeToInviteJoinRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeToInviteJoinRoom not implemented")
}
func (UnimplementedRoomServiceServer) RequestToJoinRoom(context.Context, *CSRequestToJoinRoom) (*SCRequestToJoinRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToJoinRoom not implemented")
}
func (UnimplementedRoomServiceServer) ApproveRequestToJoinRoom(context.Context, *CSApproveRequestToJoinRoom) (*SCApproveRequestToJoinRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveRequestToJoinRoom not implemented")
}
func (UnimplementedRoomServiceServer) KickUserFromRoom(context.Context, *CSKickUserFromRoom) (*SCKickUserFromRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUserFromRoom not implemented")
}
func (UnimplementedRoomServiceServer) LeaveRoom(context.Context, *CSLeaveRoom) (*SCLeaveRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedRoomServiceServer) CloseRoom(context.Context, *CSCloseRoom) (*SCCloseRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseRoom not implemented")
}
func (UnimplementedRoomServiceServer) mustEmbedUnimplementedRoomServiceServer() {}
func (UnimplementedRoomServiceServer) testEmbeddedByValue()                     {}

// UnsafeRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServiceServer will
// result in compilation errors.
type UnsafeRoomServiceServer interface {
	mustEmbedUnimplementedRoomServiceServer()
}

func RegisterRoomServiceServer(s grpc.ServiceRegistrar, srv RoomServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoomServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoomService_ServiceDesc, srv)
}

func _RoomService_RoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSRoomList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_RoomList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RoomList(ctx, req.(*CSRoomList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RoomDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSRoomDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RoomDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_RoomDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RoomDetail(ctx, req.(*CSRoomDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSCreateRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CreateRoom(ctx, req.(*CSCreateRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_InviteToJoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSInviteToJoinRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).InviteToJoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_InviteToJoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).InviteToJoinRoom(ctx, req.(*CSInviteToJoinRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_AgreeToInviteJoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSAgreeToInviteJoinRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).AgreeToInviteJoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_AgreeToInviteJoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).AgreeToInviteJoinRoom(ctx, req.(*CSAgreeToInviteJoinRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RequestToJoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSRequestToJoinRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RequestToJoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_RequestToJoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RequestToJoinRoom(ctx, req.(*CSRequestToJoinRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_ApproveRequestToJoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSApproveRequestToJoinRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).ApproveRequestToJoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_ApproveRequestToJoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).ApproveRequestToJoinRoom(ctx, req.(*CSApproveRequestToJoinRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_KickUserFromRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSKickUserFromRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).KickUserFromRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_KickUserFromRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).KickUserFromRoom(ctx, req.(*CSKickUserFromRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSLeaveRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).LeaveRoom(ctx, req.(*CSLeaveRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_CloseRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSCloseRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CloseRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_CloseRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CloseRoom(ctx, req.(*CSCloseRoom))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomService_ServiceDesc is the grpc.ServiceDesc for RoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoomList",
			Handler:    _RoomService_RoomList_Handler,
		},
		{
			MethodName: "RoomDetail",
			Handler:    _RoomService_RoomDetail_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _RoomService_CreateRoom_Handler,
		},
		{
			MethodName: "InviteToJoinRoom",
			Handler:    _RoomService_InviteToJoinRoom_Handler,
		},
		{
			MethodName: "AgreeToInviteJoinRoom",
			Handler:    _RoomService_AgreeToInviteJoinRoom_Handler,
		},
		{
			MethodName: "RequestToJoinRoom",
			Handler:    _RoomService_RequestToJoinRoom_Handler,
		},
		{
			MethodName: "ApproveRequestToJoinRoom",
			Handler:    _RoomService_ApproveRequestToJoinRoom_Handler,
		},
		{
			MethodName: "KickUserFromRoom",
			Handler:    _RoomService_KickUserFromRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _RoomService_LeaveRoom_Handler,
		},
		{
			MethodName: "CloseRoom",
			Handler:    _RoomService_CloseRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/room_service.proto",
}
