// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: message/equip_service.proto

package climsg

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SCEquipWear_Code int32

const (
	SCEquipWear_ErrUnspecified   SCEquipWear_Code = 0 // Please try again later
	SCEquipWear_Succeeded        SCEquipWear_Code = 1 // Succeeded
	SCEquipWear_ErrEquipNotExist SCEquipWear_Code = 2 // Equipment does not exist
	SCEquipWear_ErrHeroNotExist  SCEquipWear_Code = 3 // Hero does not exist
	SCEquipWear_ErrAlreadyWorn   SCEquipWear_Code = 4 // Already worn
)

// Enum value maps for SCEquipWear_Code.
var (
	SCEquipWear_Code_name = map[int32]string{
		0: "ErrUnspecified",
		1: "Succeeded",
		2: "ErrEquipNotExist",
		3: "ErrHeroNotExist",
		4: "ErrAlreadyWorn",
	}
	SCEquipWear_Code_value = map[string]int32{
		"ErrUnspecified":   0,
		"Succeeded":        1,
		"ErrEquipNotExist": 2,
		"ErrHeroNotExist":  3,
		"ErrAlreadyWorn":   4,
	}
)

func (x SCEquipWear_Code) Enum() *SCEquipWear_Code {
	p := new(SCEquipWear_Code)
	*p = x
	return p
}

func (x SCEquipWear_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCEquipWear_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_message_equip_service_proto_enumTypes[0].Descriptor()
}

func (SCEquipWear_Code) Type() protoreflect.EnumType {
	return &file_message_equip_service_proto_enumTypes[0]
}

func (x SCEquipWear_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCEquipWear_Code.Descriptor instead.
func (SCEquipWear_Code) EnumDescriptor() ([]byte, []int) {
	return file_message_equip_service_proto_rawDescGZIP(), []int{2, 0}
}

type SCEquipTakeOff_Code int32

const (
	SCEquipTakeOff_ErrUnspecified   SCEquipTakeOff_Code = 0 // Please try again later
	SCEquipTakeOff_Succeeded        SCEquipTakeOff_Code = 1 // Succeeded
	SCEquipTakeOff_ErrEquipNotExist SCEquipTakeOff_Code = 2 // Equipment does not exist
	SCEquipTakeOff_ErrNotWearing    SCEquipTakeOff_Code = 3 // Not wearing
)

// Enum value maps for SCEquipTakeOff_Code.
var (
	SCEquipTakeOff_Code_name = map[int32]string{
		0: "ErrUnspecified",
		1: "Succeeded",
		2: "ErrEquipNotExist",
		3: "ErrNotWearing",
	}
	SCEquipTakeOff_Code_value = map[string]int32{
		"ErrUnspecified":   0,
		"Succeeded":        1,
		"ErrEquipNotExist": 2,
		"ErrNotWearing":    3,
	}
)

func (x SCEquipTakeOff_Code) Enum() *SCEquipTakeOff_Code {
	p := new(SCEquipTakeOff_Code)
	*p = x
	return p
}

func (x SCEquipTakeOff_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCEquipTakeOff_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_message_equip_service_proto_enumTypes[1].Descriptor()
}

func (SCEquipTakeOff_Code) Type() protoreflect.EnumType {
	return &file_message_equip_service_proto_enumTypes[1]
}

func (x SCEquipTakeOff_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCEquipTakeOff_Code.Descriptor instead.
func (SCEquipTakeOff_Code) EnumDescriptor() ([]byte, []int) {
	return file_message_equip_service_proto_rawDescGZIP(), []int{4, 0}
}

type SCEquipUpgrade_Code int32

const (
	SCEquipUpgrade_ErrUnspecified   SCEquipUpgrade_Code = 0 // Please try again later
	SCEquipUpgrade_Succeeded        SCEquipUpgrade_Code = 1 // Succeeded
	SCEquipUpgrade_ErrEquipNotExist SCEquipUpgrade_Code = 2 // Equipment does not exist
	SCEquipUpgrade_ErrMaxLevel      SCEquipUpgrade_Code = 3 // Already max level
	SCEquipUpgrade_ErrCostNotEnough SCEquipUpgrade_Code = 4 // Cost not enough
)

// Enum value maps for SCEquipUpgrade_Code.
var (
	SCEquipUpgrade_Code_name = map[int32]string{
		0: "ErrUnspecified",
		1: "Succeeded",
		2: "ErrEquipNotExist",
		3: "ErrMaxLevel",
		4: "ErrCostNotEnough",
	}
	SCEquipUpgrade_Code_value = map[string]int32{
		"ErrUnspecified":   0,
		"Succeeded":        1,
		"ErrEquipNotExist": 2,
		"ErrMaxLevel":      3,
		"ErrCostNotEnough": 4,
	}
)

func (x SCEquipUpgrade_Code) Enum() *SCEquipUpgrade_Code {
	p := new(SCEquipUpgrade_Code)
	*p = x
	return p
}

func (x SCEquipUpgrade_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCEquipUpgrade_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_message_equip_service_proto_enumTypes[2].Descriptor()
}

func (SCEquipUpgrade_Code) Type() protoreflect.EnumType {
	return &file_message_equip_service_proto_enumTypes[2]
}

func (x SCEquipUpgrade_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCEquipUpgrade_Code.Descriptor instead.
func (SCEquipUpgrade_Code) EnumDescriptor() ([]byte, []int) {
	return file_message_equip_service_proto_rawDescGZIP(), []int{6, 0}
}

// @push Equipment updated
type SCPushEquipUpdated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Equips        []*EquipProto          `protobuf:"bytes,1,rep,name=equips,proto3" json:"equips,omitempty"` // Updated equipment list
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCPushEquipUpdated) Reset() {
	*x = SCPushEquipUpdated{}
	mi := &file_message_equip_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCPushEquipUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCPushEquipUpdated) ProtoMessage() {}

func (x *SCPushEquipUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_message_equip_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCPushEquipUpdated.ProtoReflect.Descriptor instead.
func (*SCPushEquipUpdated) Descriptor() ([]byte, []int) {
	return file_message_equip_service_proto_rawDescGZIP(), []int{0}
}

func (x *SCPushEquipUpdated) GetEquips() []*EquipProto {
	if x != nil {
		return x.Equips
	}
	return nil
}

// Request: Wear equipment
type CSEquipWear struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EquipId       int64                  `protobuf:"varint,1,opt,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"` // Equipment ID
	HeroId        int64                  `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`    // Hero ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSEquipWear) Reset() {
	*x = CSEquipWear{}
	mi := &file_message_equip_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSEquipWear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSEquipWear) ProtoMessage() {}

func (x *CSEquipWear) ProtoReflect() protoreflect.Message {
	mi := &file_message_equip_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSEquipWear.ProtoReflect.Descriptor instead.
func (*CSEquipWear) Descriptor() ([]byte, []int) {
	return file_message_equip_service_proto_rawDescGZIP(), []int{1}
}

func (x *CSEquipWear) GetEquipId() int64 {
	if x != nil {
		return x.EquipId
	}
	return 0
}

func (x *CSEquipWear) GetHeroId() int64 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

// Response: Wear equipment
type SCEquipWear struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Code            SCEquipWear_Code       `protobuf:"varint,1,opt,name=code,proto3,enum=message.SCEquipWear_Code" json:"code,omitempty"`
	ReplacedEquipId int64                  `protobuf:"varint,2,opt,name=replaced_equip_id,json=replacedEquipId,proto3" json:"replaced_equip_id,omitempty"` // Taken off equipment ID
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SCEquipWear) Reset() {
	*x = SCEquipWear{}
	mi := &file_message_equip_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCEquipWear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCEquipWear) ProtoMessage() {}

func (x *SCEquipWear) ProtoReflect() protoreflect.Message {
	mi := &file_message_equip_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCEquipWear.ProtoReflect.Descriptor instead.
func (*SCEquipWear) Descriptor() ([]byte, []int) {
	return file_message_equip_service_proto_rawDescGZIP(), []int{2}
}

func (x *SCEquipWear) GetCode() SCEquipWear_Code {
	if x != nil {
		return x.Code
	}
	return SCEquipWear_ErrUnspecified
}

func (x *SCEquipWear) GetReplacedEquipId() int64 {
	if x != nil {
		return x.ReplacedEquipId
	}
	return 0
}

// Request: Take off equipment
type CSEquipTakeOff struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EquipId       int64                  `protobuf:"varint,1,opt,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"` // Equipment ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSEquipTakeOff) Reset() {
	*x = CSEquipTakeOff{}
	mi := &file_message_equip_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSEquipTakeOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSEquipTakeOff) ProtoMessage() {}

func (x *CSEquipTakeOff) ProtoReflect() protoreflect.Message {
	mi := &file_message_equip_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSEquipTakeOff.ProtoReflect.Descriptor instead.
func (*CSEquipTakeOff) Descriptor() ([]byte, []int) {
	return file_message_equip_service_proto_rawDescGZIP(), []int{3}
}

func (x *CSEquipTakeOff) GetEquipId() int64 {
	if x != nil {
		return x.EquipId
	}
	return 0
}

// Response: Take off equipment
type SCEquipTakeOff struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          SCEquipTakeOff_Code    `protobuf:"varint,1,opt,name=code,proto3,enum=message.SCEquipTakeOff_Code" json:"code,omitempty"`
	Equip         *EquipProto            `protobuf:"bytes,2,opt,name=equip,proto3" json:"equip,omitempty"` // Updated equipment
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCEquipTakeOff) Reset() {
	*x = SCEquipTakeOff{}
	mi := &file_message_equip_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCEquipTakeOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCEquipTakeOff) ProtoMessage() {}

func (x *SCEquipTakeOff) ProtoReflect() protoreflect.Message {
	mi := &file_message_equip_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCEquipTakeOff.ProtoReflect.Descriptor instead.
func (*SCEquipTakeOff) Descriptor() ([]byte, []int) {
	return file_message_equip_service_proto_rawDescGZIP(), []int{4}
}

func (x *SCEquipTakeOff) GetCode() SCEquipTakeOff_Code {
	if x != nil {
		return x.Code
	}
	return SCEquipTakeOff_ErrUnspecified
}

func (x *SCEquipTakeOff) GetEquip() *EquipProto {
	if x != nil {
		return x.Equip
	}
	return nil
}

// Request: Equipment upgrade
type CSEquipUpgrade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EquipId       int64                  `protobuf:"varint,1,opt,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"` // Equipment ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSEquipUpgrade) Reset() {
	*x = CSEquipUpgrade{}
	mi := &file_message_equip_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSEquipUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSEquipUpgrade) ProtoMessage() {}

func (x *CSEquipUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_message_equip_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSEquipUpgrade.ProtoReflect.Descriptor instead.
func (*CSEquipUpgrade) Descriptor() ([]byte, []int) {
	return file_message_equip_service_proto_rawDescGZIP(), []int{5}
}

func (x *CSEquipUpgrade) GetEquipId() int64 {
	if x != nil {
		return x.EquipId
	}
	return 0
}

// Response: Equipment upgrade
type SCEquipUpgrade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          SCEquipUpgrade_Code    `protobuf:"varint,1,opt,name=code,proto3,enum=message.SCEquipUpgrade_Code" json:"code,omitempty"`
	Equip         *EquipProto            `protobuf:"bytes,2,opt,name=equip,proto3" json:"equip,omitempty"`                                                                             // Upgraded equipment
	Costs         map[int64]int64        `protobuf:"bytes,3,rep,name=costs,proto3" json:"costs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Consumed materials
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCEquipUpgrade) Reset() {
	*x = SCEquipUpgrade{}
	mi := &file_message_equip_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCEquipUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCEquipUpgrade) ProtoMessage() {}

func (x *SCEquipUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_message_equip_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCEquipUpgrade.ProtoReflect.Descriptor instead.
func (*SCEquipUpgrade) Descriptor() ([]byte, []int) {
	return file_message_equip_service_proto_rawDescGZIP(), []int{6}
}

func (x *SCEquipUpgrade) GetCode() SCEquipUpgrade_Code {
	if x != nil {
		return x.Code
	}
	return SCEquipUpgrade_ErrUnspecified
}

func (x *SCEquipUpgrade) GetEquip() *EquipProto {
	if x != nil {
		return x.Equip
	}
	return nil
}

func (x *SCEquipUpgrade) GetCosts() map[int64]int64 {
	if x != nil {
		return x.Costs
	}
	return nil
}

var File_message_equip_service_proto protoreflect.FileDescriptor

var file_message_equip_service_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x12, 0x53, 0x43, 0x50,
	0x75, 0x73, 0x68, 0x45, 0x71, 0x75, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x22, 0x41, 0x0a, 0x0b,
	0x43, 0x53, 0x45, 0x71, 0x75, 0x69, 0x70, 0x57, 0x65, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x22,
	0xd2, 0x01, 0x0a, 0x0b, 0x53, 0x43, 0x45, 0x71, 0x75, 0x69, 0x70, 0x57, 0x65, 0x61, 0x72, 0x12,
	0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x43, 0x45, 0x71, 0x75, 0x69, 0x70, 0x57,
	0x65, 0x61, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x72, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x57, 0x6f,
	0x72, 0x6e, 0x10, 0x04, 0x22, 0x2b, 0x0a, 0x0e, 0x43, 0x53, 0x45, 0x71, 0x75, 0x69, 0x70, 0x54,
	0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70, 0x49,
	0x64, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x53, 0x43, 0x45, 0x71, 0x75, 0x69, 0x70, 0x54, 0x61, 0x6b,
	0x65, 0x4f, 0x66, 0x66, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x43, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x22, 0x52, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x72, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x57, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x10, 0x03, 0x22, 0x2b, 0x0a, 0x0e, 0x43, 0x53, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x0e, 0x53, 0x43, 0x45, 0x71, 0x75, 0x69, 0x70, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x43,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x12, 0x38, 0x0a, 0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x43, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x38, 0x0a, 0x0a,
	0x43, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x66, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x4d, 0x61,
	0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x04, 0x32, 0x99,
	0x02, 0x0a, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4f, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x57, 0x65, 0x61, 0x72, 0x12, 0x14, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x53, 0x45, 0x71, 0x75, 0x69, 0x70, 0x57, 0x65,
	0x61, 0x72, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x43, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x57, 0x65, 0x61, 0x72, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x2f, 0x77, 0x65, 0x61, 0x72,
	0x12, 0x5b, 0x0a, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66,
	0x12, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x53, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x43, 0x45, 0x71, 0x75, 0x69, 0x70, 0x54, 0x61, 0x6b, 0x65, 0x4f,
	0x66, 0x66, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x2f, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x12, 0x5b, 0x0a,
	0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x17, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x53, 0x45, 0x71, 0x75, 0x69, 0x70, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x43, 0x45, 0x71, 0x75, 0x69, 0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x3b, 0x63, 0x6c, 0x69, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_message_equip_service_proto_rawDescOnce sync.Once
	file_message_equip_service_proto_rawDescData []byte
)

func file_message_equip_service_proto_rawDescGZIP() []byte {
	file_message_equip_service_proto_rawDescOnce.Do(func() {
		file_message_equip_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_message_equip_service_proto_rawDesc), len(file_message_equip_service_proto_rawDesc)))
	})
	return file_message_equip_service_proto_rawDescData
}

var file_message_equip_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_message_equip_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_message_equip_service_proto_goTypes = []any{
	(SCEquipWear_Code)(0),      // 0: message.SCEquipWear.Code
	(SCEquipTakeOff_Code)(0),   // 1: message.SCEquipTakeOff.Code
	(SCEquipUpgrade_Code)(0),   // 2: message.SCEquipUpgrade.Code
	(*SCPushEquipUpdated)(nil), // 3: message.SCPushEquipUpdated
	(*CSEquipWear)(nil),        // 4: message.CSEquipWear
	(*SCEquipWear)(nil),        // 5: message.SCEquipWear
	(*CSEquipTakeOff)(nil),     // 6: message.CSEquipTakeOff
	(*SCEquipTakeOff)(nil),     // 7: message.SCEquipTakeOff
	(*CSEquipUpgrade)(nil),     // 8: message.CSEquipUpgrade
	(*SCEquipUpgrade)(nil),     // 9: message.SCEquipUpgrade
	nil,                        // 10: message.SCEquipUpgrade.CostsEntry
	(*EquipProto)(nil),         // 11: message.EquipProto
}
var file_message_equip_service_proto_depIdxs = []int32{
	11, // 0: message.SCPushEquipUpdated.equips:type_name -> message.EquipProto
	0,  // 1: message.SCEquipWear.code:type_name -> message.SCEquipWear.Code
	1,  // 2: message.SCEquipTakeOff.code:type_name -> message.SCEquipTakeOff.Code
	11, // 3: message.SCEquipTakeOff.equip:type_name -> message.EquipProto
	2,  // 4: message.SCEquipUpgrade.code:type_name -> message.SCEquipUpgrade.Code
	11, // 5: message.SCEquipUpgrade.equip:type_name -> message.EquipProto
	10, // 6: message.SCEquipUpgrade.costs:type_name -> message.SCEquipUpgrade.CostsEntry
	4,  // 7: message.EquipService.EquipWear:input_type -> message.CSEquipWear
	6,  // 8: message.EquipService.EquipTakeOff:input_type -> message.CSEquipTakeOff
	8,  // 9: message.EquipService.EquipUpgrade:input_type -> message.CSEquipUpgrade
	5,  // 10: message.EquipService.EquipWear:output_type -> message.SCEquipWear
	7,  // 11: message.EquipService.EquipTakeOff:output_type -> message.SCEquipTakeOff
	9,  // 12: message.EquipService.EquipUpgrade:output_type -> message.SCEquipUpgrade
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_message_equip_service_proto_init() }
func file_message_equip_service_proto_init() {
	if File_message_equip_service_proto != nil {
		return
	}
	file_message_equip_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_message_equip_service_proto_rawDesc), len(file_message_equip_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_message_equip_service_proto_goTypes,
		DependencyIndexes: file_message_equip_service_proto_depIdxs,
		EnumInfos:         file_message_equip_service_proto_enumTypes,
		MessageInfos:      file_message_equip_service_proto_msgTypes,
	}.Build()
	File_message_equip_service_proto = out.File
	file_message_equip_service_proto_goTypes = nil
	file_message_equip_service_proto_depIdxs = nil
}
