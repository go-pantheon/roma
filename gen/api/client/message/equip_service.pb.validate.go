// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message/equip_service.proto

package climsg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SCPushEquipUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SCPushEquipUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCPushEquipUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCPushEquipUpdatedMultiError, or nil if none found.
func (m *SCPushEquipUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *SCPushEquipUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEquips() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SCPushEquipUpdatedValidationError{
						field:  fmt.Sprintf("Equips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SCPushEquipUpdatedValidationError{
						field:  fmt.Sprintf("Equips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SCPushEquipUpdatedValidationError{
					field:  fmt.Sprintf("Equips[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SCPushEquipUpdatedMultiError(errors)
	}

	return nil
}

// SCPushEquipUpdatedMultiError is an error wrapping multiple validation errors
// returned by SCPushEquipUpdated.ValidateAll() if the designated constraints
// aren't met.
type SCPushEquipUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCPushEquipUpdatedMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCPushEquipUpdatedMultiError) AllErrors() []error { return m }

// SCPushEquipUpdatedValidationError is the validation error returned by
// SCPushEquipUpdated.Validate if the designated constraints aren't met.
type SCPushEquipUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCPushEquipUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCPushEquipUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCPushEquipUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCPushEquipUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCPushEquipUpdatedValidationError) ErrorName() string {
	return "SCPushEquipUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e SCPushEquipUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCPushEquipUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCPushEquipUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCPushEquipUpdatedValidationError{}

// Validate checks the field values on CSEquipWear with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSEquipWear) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSEquipWear with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSEquipWearMultiError, or
// nil if none found.
func (m *CSEquipWear) ValidateAll() error {
	return m.validate(true)
}

func (m *CSEquipWear) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EquipId

	// no validation rules for HeroId

	if len(errors) > 0 {
		return CSEquipWearMultiError(errors)
	}

	return nil
}

// CSEquipWearMultiError is an error wrapping multiple validation errors
// returned by CSEquipWear.ValidateAll() if the designated constraints aren't met.
type CSEquipWearMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSEquipWearMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSEquipWearMultiError) AllErrors() []error { return m }

// CSEquipWearValidationError is the validation error returned by
// CSEquipWear.Validate if the designated constraints aren't met.
type CSEquipWearValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSEquipWearValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSEquipWearValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSEquipWearValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSEquipWearValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSEquipWearValidationError) ErrorName() string { return "CSEquipWearValidationError" }

// Error satisfies the builtin error interface
func (e CSEquipWearValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSEquipWear.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSEquipWearValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSEquipWearValidationError{}

// Validate checks the field values on SCEquipWear with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCEquipWear) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCEquipWear with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCEquipWearMultiError, or
// nil if none found.
func (m *SCEquipWear) ValidateAll() error {
	return m.validate(true)
}

func (m *SCEquipWear) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for ReplacedEquipId

	if len(errors) > 0 {
		return SCEquipWearMultiError(errors)
	}

	return nil
}

// SCEquipWearMultiError is an error wrapping multiple validation errors
// returned by SCEquipWear.ValidateAll() if the designated constraints aren't met.
type SCEquipWearMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCEquipWearMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCEquipWearMultiError) AllErrors() []error { return m }

// SCEquipWearValidationError is the validation error returned by
// SCEquipWear.Validate if the designated constraints aren't met.
type SCEquipWearValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCEquipWearValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCEquipWearValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCEquipWearValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCEquipWearValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCEquipWearValidationError) ErrorName() string { return "SCEquipWearValidationError" }

// Error satisfies the builtin error interface
func (e SCEquipWearValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCEquipWear.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCEquipWearValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCEquipWearValidationError{}

// Validate checks the field values on CSEquipTakeOff with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSEquipTakeOff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSEquipTakeOff with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSEquipTakeOffMultiError,
// or nil if none found.
func (m *CSEquipTakeOff) ValidateAll() error {
	return m.validate(true)
}

func (m *CSEquipTakeOff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EquipId

	if len(errors) > 0 {
		return CSEquipTakeOffMultiError(errors)
	}

	return nil
}

// CSEquipTakeOffMultiError is an error wrapping multiple validation errors
// returned by CSEquipTakeOff.ValidateAll() if the designated constraints
// aren't met.
type CSEquipTakeOffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSEquipTakeOffMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSEquipTakeOffMultiError) AllErrors() []error { return m }

// CSEquipTakeOffValidationError is the validation error returned by
// CSEquipTakeOff.Validate if the designated constraints aren't met.
type CSEquipTakeOffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSEquipTakeOffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSEquipTakeOffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSEquipTakeOffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSEquipTakeOffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSEquipTakeOffValidationError) ErrorName() string { return "CSEquipTakeOffValidationError" }

// Error satisfies the builtin error interface
func (e CSEquipTakeOffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSEquipTakeOff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSEquipTakeOffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSEquipTakeOffValidationError{}

// Validate checks the field values on SCEquipTakeOff with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCEquipTakeOff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCEquipTakeOff with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCEquipTakeOffMultiError,
// or nil if none found.
func (m *SCEquipTakeOff) ValidateAll() error {
	return m.validate(true)
}

func (m *SCEquipTakeOff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetEquip()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SCEquipTakeOffValidationError{
					field:  "Equip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SCEquipTakeOffValidationError{
					field:  "Equip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEquip()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCEquipTakeOffValidationError{
				field:  "Equip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SCEquipTakeOffMultiError(errors)
	}

	return nil
}

// SCEquipTakeOffMultiError is an error wrapping multiple validation errors
// returned by SCEquipTakeOff.ValidateAll() if the designated constraints
// aren't met.
type SCEquipTakeOffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCEquipTakeOffMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCEquipTakeOffMultiError) AllErrors() []error { return m }

// SCEquipTakeOffValidationError is the validation error returned by
// SCEquipTakeOff.Validate if the designated constraints aren't met.
type SCEquipTakeOffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCEquipTakeOffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCEquipTakeOffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCEquipTakeOffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCEquipTakeOffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCEquipTakeOffValidationError) ErrorName() string { return "SCEquipTakeOffValidationError" }

// Error satisfies the builtin error interface
func (e SCEquipTakeOffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCEquipTakeOff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCEquipTakeOffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCEquipTakeOffValidationError{}

// Validate checks the field values on CSEquipUpgrade with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSEquipUpgrade) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSEquipUpgrade with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSEquipUpgradeMultiError,
// or nil if none found.
func (m *CSEquipUpgrade) ValidateAll() error {
	return m.validate(true)
}

func (m *CSEquipUpgrade) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EquipId

	if len(errors) > 0 {
		return CSEquipUpgradeMultiError(errors)
	}

	return nil
}

// CSEquipUpgradeMultiError is an error wrapping multiple validation errors
// returned by CSEquipUpgrade.ValidateAll() if the designated constraints
// aren't met.
type CSEquipUpgradeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSEquipUpgradeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSEquipUpgradeMultiError) AllErrors() []error { return m }

// CSEquipUpgradeValidationError is the validation error returned by
// CSEquipUpgrade.Validate if the designated constraints aren't met.
type CSEquipUpgradeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSEquipUpgradeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSEquipUpgradeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSEquipUpgradeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSEquipUpgradeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSEquipUpgradeValidationError) ErrorName() string { return "CSEquipUpgradeValidationError" }

// Error satisfies the builtin error interface
func (e CSEquipUpgradeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSEquipUpgrade.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSEquipUpgradeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSEquipUpgradeValidationError{}

// Validate checks the field values on SCEquipUpgrade with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCEquipUpgrade) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCEquipUpgrade with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCEquipUpgradeMultiError,
// or nil if none found.
func (m *SCEquipUpgrade) ValidateAll() error {
	return m.validate(true)
}

func (m *SCEquipUpgrade) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetEquip()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SCEquipUpgradeValidationError{
					field:  "Equip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SCEquipUpgradeValidationError{
					field:  "Equip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEquip()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCEquipUpgradeValidationError{
				field:  "Equip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Costs

	if len(errors) > 0 {
		return SCEquipUpgradeMultiError(errors)
	}

	return nil
}

// SCEquipUpgradeMultiError is an error wrapping multiple validation errors
// returned by SCEquipUpgrade.ValidateAll() if the designated constraints
// aren't met.
type SCEquipUpgradeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCEquipUpgradeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCEquipUpgradeMultiError) AllErrors() []error { return m }

// SCEquipUpgradeValidationError is the validation error returned by
// SCEquipUpgrade.Validate if the designated constraints aren't met.
type SCEquipUpgradeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCEquipUpgradeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCEquipUpgradeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCEquipUpgradeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCEquipUpgradeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCEquipUpgradeValidationError) ErrorName() string { return "SCEquipUpgradeValidationError" }

// Error satisfies the builtin error interface
func (e SCEquipUpgradeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCEquipUpgrade.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCEquipUpgradeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCEquipUpgradeValidationError{}
