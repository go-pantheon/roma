// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: message/equip_service.proto

package climsg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EquipService_EquipWear_FullMethodName    = "/message.EquipService/EquipWear"
	EquipService_EquipTakeOff_FullMethodName = "/message.EquipService/EquipTakeOff"
	EquipService_EquipUpgrade_FullMethodName = "/message.EquipService/EquipUpgrade"
)

// EquipServiceClient is the client API for EquipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Equipment service
type EquipServiceClient interface {
	// Wear equipment
	EquipWear(ctx context.Context, in *CSEquipWear, opts ...grpc.CallOption) (*SCEquipWear, error)
	// Take off equipment
	EquipTakeOff(ctx context.Context, in *CSEquipTakeOff, opts ...grpc.CallOption) (*SCEquipTakeOff, error)
	// Equipment upgrade
	EquipUpgrade(ctx context.Context, in *CSEquipUpgrade, opts ...grpc.CallOption) (*SCEquipUpgrade, error)
}

type equipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipServiceClient(cc grpc.ClientConnInterface) EquipServiceClient {
	return &equipServiceClient{cc}
}

func (c *equipServiceClient) EquipWear(ctx context.Context, in *CSEquipWear, opts ...grpc.CallOption) (*SCEquipWear, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCEquipWear)
	err := c.cc.Invoke(ctx, EquipService_EquipWear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipServiceClient) EquipTakeOff(ctx context.Context, in *CSEquipTakeOff, opts ...grpc.CallOption) (*SCEquipTakeOff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCEquipTakeOff)
	err := c.cc.Invoke(ctx, EquipService_EquipTakeOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipServiceClient) EquipUpgrade(ctx context.Context, in *CSEquipUpgrade, opts ...grpc.CallOption) (*SCEquipUpgrade, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCEquipUpgrade)
	err := c.cc.Invoke(ctx, EquipService_EquipUpgrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipServiceServer is the server API for EquipService service.
// All implementations must embed UnimplementedEquipServiceServer
// for forward compatibility.
//
// Equipment service
type EquipServiceServer interface {
	// Wear equipment
	EquipWear(context.Context, *CSEquipWear) (*SCEquipWear, error)
	// Take off equipment
	EquipTakeOff(context.Context, *CSEquipTakeOff) (*SCEquipTakeOff, error)
	// Equipment upgrade
	EquipUpgrade(context.Context, *CSEquipUpgrade) (*SCEquipUpgrade, error)
	mustEmbedUnimplementedEquipServiceServer()
}

// UnimplementedEquipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEquipServiceServer struct{}

func (UnimplementedEquipServiceServer) EquipWear(context.Context, *CSEquipWear) (*SCEquipWear, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipWear not implemented")
}
func (UnimplementedEquipServiceServer) EquipTakeOff(context.Context, *CSEquipTakeOff) (*SCEquipTakeOff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipTakeOff not implemented")
}
func (UnimplementedEquipServiceServer) EquipUpgrade(context.Context, *CSEquipUpgrade) (*SCEquipUpgrade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipUpgrade not implemented")
}
func (UnimplementedEquipServiceServer) mustEmbedUnimplementedEquipServiceServer() {}
func (UnimplementedEquipServiceServer) testEmbeddedByValue()                      {}

// UnsafeEquipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipServiceServer will
// result in compilation errors.
type UnsafeEquipServiceServer interface {
	mustEmbedUnimplementedEquipServiceServer()
}

func RegisterEquipServiceServer(s grpc.ServiceRegistrar, srv EquipServiceServer) {
	// If the following call pancis, it indicates UnimplementedEquipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EquipService_ServiceDesc, srv)
}

func _EquipService_EquipWear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSEquipWear)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipServiceServer).EquipWear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipService_EquipWear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipServiceServer).EquipWear(ctx, req.(*CSEquipWear))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipService_EquipTakeOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSEquipTakeOff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipServiceServer).EquipTakeOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipService_EquipTakeOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipServiceServer).EquipTakeOff(ctx, req.(*CSEquipTakeOff))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipService_EquipUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSEquipUpgrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipServiceServer).EquipUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipService_EquipUpgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipServiceServer).EquipUpgrade(ctx, req.(*CSEquipUpgrade))
	}
	return interceptor(ctx, in, info, handler)
}

// EquipService_ServiceDesc is the grpc.ServiceDesc for EquipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EquipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.EquipService",
	HandlerType: (*EquipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EquipWear",
			Handler:    _EquipService_EquipWear_Handler,
		},
		{
			MethodName: "EquipTakeOff",
			Handler:    _EquipService_EquipTakeOff_Handler,
		},
		{
			MethodName: "EquipUpgrade",
			Handler:    _EquipService_EquipUpgrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/equip_service.proto",
}
