// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message/system_service.proto

package climsg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CSHandshake with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSHandshake) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSHandshake with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSHandshakeMultiError, or
// nil if none found.
func (m *CSHandshake) ValidateAll() error {
	return m.validate(true)
}

func (m *CSHandshake) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ServerId

	// no validation rules for Pub

	if len(errors) > 0 {
		return CSHandshakeMultiError(errors)
	}

	return nil
}

// CSHandshakeMultiError is an error wrapping multiple validation errors
// returned by CSHandshake.ValidateAll() if the designated constraints aren't met.
type CSHandshakeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSHandshakeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSHandshakeMultiError) AllErrors() []error { return m }

// CSHandshakeValidationError is the validation error returned by
// CSHandshake.Validate if the designated constraints aren't met.
type CSHandshakeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSHandshakeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSHandshakeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSHandshakeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSHandshakeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSHandshakeValidationError) ErrorName() string { return "CSHandshakeValidationError" }

// Error satisfies the builtin error interface
func (e CSHandshakeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSHandshake.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSHandshakeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSHandshakeValidationError{}

// Validate checks the field values on SCHandshake with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCHandshake) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCHandshake with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCHandshakeMultiError, or
// nil if none found.
func (m *SCHandshake) ValidateAll() error {
	return m.validate(true)
}

func (m *SCHandshake) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartIndex

	// no validation rules for Pub

	if len(errors) > 0 {
		return SCHandshakeMultiError(errors)
	}

	return nil
}

// SCHandshakeMultiError is an error wrapping multiple validation errors
// returned by SCHandshake.ValidateAll() if the designated constraints aren't met.
type SCHandshakeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCHandshakeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCHandshakeMultiError) AllErrors() []error { return m }

// SCHandshakeValidationError is the validation error returned by
// SCHandshake.Validate if the designated constraints aren't met.
type SCHandshakeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCHandshakeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCHandshakeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCHandshakeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCHandshakeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCHandshakeValidationError) ErrorName() string { return "SCHandshakeValidationError" }

// Error satisfies the builtin error interface
func (e SCHandshakeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCHandshake.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCHandshakeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCHandshakeValidationError{}

// Validate checks the field values on CSHeartbeat with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSHeartbeat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSHeartbeat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSHeartbeatMultiError, or
// nil if none found.
func (m *CSHeartbeat) ValidateAll() error {
	return m.validate(true)
}

func (m *CSHeartbeat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientTime

	if len(errors) > 0 {
		return CSHeartbeatMultiError(errors)
	}

	return nil
}

// CSHeartbeatMultiError is an error wrapping multiple validation errors
// returned by CSHeartbeat.ValidateAll() if the designated constraints aren't met.
type CSHeartbeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSHeartbeatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSHeartbeatMultiError) AllErrors() []error { return m }

// CSHeartbeatValidationError is the validation error returned by
// CSHeartbeat.Validate if the designated constraints aren't met.
type CSHeartbeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSHeartbeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSHeartbeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSHeartbeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSHeartbeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSHeartbeatValidationError) ErrorName() string { return "CSHeartbeatValidationError" }

// Error satisfies the builtin error interface
func (e CSHeartbeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSHeartbeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSHeartbeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSHeartbeatValidationError{}

// Validate checks the field values on SCHeartbeat with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCHeartbeat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCHeartbeat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCHeartbeatMultiError, or
// nil if none found.
func (m *SCHeartbeat) ValidateAll() error {
	return m.validate(true)
}

func (m *SCHeartbeat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerTime

	// no validation rules for Code

	if len(errors) > 0 {
		return SCHeartbeatMultiError(errors)
	}

	return nil
}

// SCHeartbeatMultiError is an error wrapping multiple validation errors
// returned by SCHeartbeat.ValidateAll() if the designated constraints aren't met.
type SCHeartbeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCHeartbeatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCHeartbeatMultiError) AllErrors() []error { return m }

// SCHeartbeatValidationError is the validation error returned by
// SCHeartbeat.Validate if the designated constraints aren't met.
type SCHeartbeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCHeartbeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCHeartbeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCHeartbeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCHeartbeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCHeartbeatValidationError) ErrorName() string { return "SCHeartbeatValidationError" }

// Error satisfies the builtin error interface
func (e SCHeartbeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCHeartbeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCHeartbeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCHeartbeatValidationError{}

// Validate checks the field values on SCServerUnexpectedErr with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SCServerUnexpectedErr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCServerUnexpectedErr with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCServerUnexpectedErrMultiError, or nil if none found.
func (m *SCServerUnexpectedErr) ValidateAll() error {
	return m.validate(true)
}

func (m *SCServerUnexpectedErr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mod

	// no validation rules for Seq

	// no validation rules for Msg

	if len(errors) > 0 {
		return SCServerUnexpectedErrMultiError(errors)
	}

	return nil
}

// SCServerUnexpectedErrMultiError is an error wrapping multiple validation
// errors returned by SCServerUnexpectedErr.ValidateAll() if the designated
// constraints aren't met.
type SCServerUnexpectedErrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCServerUnexpectedErrMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCServerUnexpectedErrMultiError) AllErrors() []error { return m }

// SCServerUnexpectedErrValidationError is the validation error returned by
// SCServerUnexpectedErr.Validate if the designated constraints aren't met.
type SCServerUnexpectedErrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCServerUnexpectedErrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCServerUnexpectedErrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCServerUnexpectedErrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCServerUnexpectedErrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCServerUnexpectedErrValidationError) ErrorName() string {
	return "SCServerUnexpectedErrValidationError"
}

// Error satisfies the builtin error interface
func (e SCServerUnexpectedErrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCServerUnexpectedErr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCServerUnexpectedErrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCServerUnexpectedErrValidationError{}

// Validate checks the field values on SCServerLogout with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCServerLogout) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCServerLogout with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCServerLogoutMultiError,
// or nil if none found.
func (m *SCServerLogout) ValidateAll() error {
	return m.validate(true)
}

func (m *SCServerLogout) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SCServerLogoutMultiError(errors)
	}

	return nil
}

// SCServerLogoutMultiError is an error wrapping multiple validation errors
// returned by SCServerLogout.ValidateAll() if the designated constraints
// aren't met.
type SCServerLogoutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCServerLogoutMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCServerLogoutMultiError) AllErrors() []error { return m }

// SCServerLogoutValidationError is the validation error returned by
// SCServerLogout.Validate if the designated constraints aren't met.
type SCServerLogoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCServerLogoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCServerLogoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCServerLogoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCServerLogoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCServerLogoutValidationError) ErrorName() string { return "SCServerLogoutValidationError" }

// Error satisfies the builtin error interface
func (e SCServerLogoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCServerLogout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCServerLogoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCServerLogoutValidationError{}
