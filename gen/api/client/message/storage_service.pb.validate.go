// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message/storage_service.proto

package climsg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SCPushItemUpdated with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SCPushItemUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCPushItemUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCPushItemUpdatedMultiError, or nil if none found.
func (m *SCPushItemUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *SCPushItemUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Items

	// no validation rules for Packs

	if len(errors) > 0 {
		return SCPushItemUpdatedMultiError(errors)
	}

	return nil
}

// SCPushItemUpdatedMultiError is an error wrapping multiple validation errors
// returned by SCPushItemUpdated.ValidateAll() if the designated constraints
// aren't met.
type SCPushItemUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCPushItemUpdatedMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCPushItemUpdatedMultiError) AllErrors() []error { return m }

// SCPushItemUpdatedValidationError is the validation error returned by
// SCPushItemUpdated.Validate if the designated constraints aren't met.
type SCPushItemUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCPushItemUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCPushItemUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCPushItemUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCPushItemUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCPushItemUpdatedValidationError) ErrorName() string {
	return "SCPushItemUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e SCPushItemUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCPushItemUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCPushItemUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCPushItemUpdatedValidationError{}

// Validate checks the field values on CSUsePack with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSUsePack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSUsePack with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSUsePackMultiError, or nil
// if none found.
func (m *CSUsePack) ValidateAll() error {
	return m.validate(true)
}

func (m *CSUsePack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CSUsePackMultiError(errors)
	}

	return nil
}

// CSUsePackMultiError is an error wrapping multiple validation errors returned
// by CSUsePack.ValidateAll() if the designated constraints aren't met.
type CSUsePackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSUsePackMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSUsePackMultiError) AllErrors() []error { return m }

// CSUsePackValidationError is the validation error returned by
// CSUsePack.Validate if the designated constraints aren't met.
type CSUsePackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSUsePackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSUsePackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSUsePackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSUsePackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSUsePackValidationError) ErrorName() string { return "CSUsePackValidationError" }

// Error satisfies the builtin error interface
func (e CSUsePackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSUsePack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSUsePackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSUsePackValidationError{}

// Validate checks the field values on SCUsePack with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCUsePack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCUsePack with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCUsePackMultiError, or nil
// if none found.
func (m *SCUsePack) ValidateAll() error {
	return m.validate(true)
}

func (m *SCUsePack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Id

	// no validation rules for Prizes

	if len(errors) > 0 {
		return SCUsePackMultiError(errors)
	}

	return nil
}

// SCUsePackMultiError is an error wrapping multiple validation errors returned
// by SCUsePack.ValidateAll() if the designated constraints aren't met.
type SCUsePackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCUsePackMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCUsePackMultiError) AllErrors() []error { return m }

// SCUsePackValidationError is the validation error returned by
// SCUsePack.Validate if the designated constraints aren't met.
type SCUsePackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCUsePackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCUsePackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCUsePackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCUsePackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCUsePackValidationError) ErrorName() string { return "SCUsePackValidationError" }

// Error satisfies the builtin error interface
func (e SCUsePackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCUsePack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCUsePackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCUsePackValidationError{}
