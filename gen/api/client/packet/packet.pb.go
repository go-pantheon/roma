// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: packet/packet.proto

package clipkt

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TCP packet structure definition
// For public network access
// The complete frame format: 4(len(data), bigEndian) + data(encrypt(byte[](Marshal(Packet)))). The client and server send frames in this format.
// After the handshake protocol, all protocols use AES encryption and decryption
// The message index number is incremented by 1 each time, and the message index number is unique within the same module
// mod + seq + obj forms the unique ID of data
type Packet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                                   // Serialized bytes of the cs/sc protocol in the message. If the corresponding protocol specifies that the data needs to be cached on the client, use data_version to compare the data version number
	DataVersion   uint64                 `protobuf:"varint,2,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"` // Data version number, default is 0. When greater than 0 and greater than the version of the same message (unique ID is the same), the data field is valid
	Obj           int64                  `protobuf:"varint,3,opt,name=obj,proto3" json:"obj,omitempty"`                                    // Module object ID, according to the business agreement to pass the corresponding object ID
	Mod           int32                  `protobuf:"varint,4,opt,name=mod,proto3" json:"mod,omitempty"`                                    // Module ID, globally unique
	Seq           int32                  `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`                                    // Message ID within the module, unique within the module
	Ver           int32                  `protobuf:"varint,6,opt,name=ver,proto3" json:"ver,omitempty"`                                    // Packet Version, default 0 means no version
	Index         int32                  `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`                                // Message index number, increment
	ConnId        int32                  `protobuf:"varint,8,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`                // Connection ID, default 0 means only used in raw KCP Connection, otherwise it is the stream ID
	FragId        int32                  `protobuf:"varint,9,opt,name=frag_id,json=fragId,proto3" json:"frag_id,omitempty"`                // Fragment ID, default 0 means no fragment. If frag_id is not 0, the data is a fragment of the message with the same frag_id.
	FragCount     int32                  `protobuf:"varint,10,opt,name=frag_count,json=fragCount,proto3" json:"frag_count,omitempty"`      // Fragment Count, the number of fragments in the same frag_id
	FragIndex     int32                  `protobuf:"varint,11,opt,name=frag_index,json=fragIndex,proto3" json:"frag_index,omitempty"`      // Fragment Index, belongs to the same frag_id
	Compress      bool                   `protobuf:"varint,20,opt,name=compress,proto3" json:"compress,omitempty"`                         // Whether the data in the body is compressed. The default compression method is zlib
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_packet_packet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_packet_packet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_packet_packet_proto_rawDescGZIP(), []int{0}
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Packet) GetDataVersion() uint64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

func (x *Packet) GetObj() int64 {
	if x != nil {
		return x.Obj
	}
	return 0
}

func (x *Packet) GetMod() int32 {
	if x != nil {
		return x.Mod
	}
	return 0
}

func (x *Packet) GetSeq() int32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Packet) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *Packet) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Packet) GetConnId() int32 {
	if x != nil {
		return x.ConnId
	}
	return 0
}

func (x *Packet) GetFragId() int32 {
	if x != nil {
		return x.FragId
	}
	return 0
}

func (x *Packet) GetFragCount() int32 {
	if x != nil {
		return x.FragCount
	}
	return 0
}

func (x *Packet) GetFragIndex() int32 {
	if x != nil {
		return x.FragIndex
	}
	return 0
}

func (x *Packet) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

var File_packet_packet_proto protoreflect.FileDescriptor

const file_packet_packet_proto_rawDesc = "" +
	"\n" +
	"\x13packet/packet.proto\x12\x06packet\"\xa9\x02\n" +
	"\x06Packet\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12!\n" +
	"\fdata_version\x18\x02 \x01(\x04R\vdataVersion\x12\x10\n" +
	"\x03obj\x18\x03 \x01(\x03R\x03obj\x12\x10\n" +
	"\x03mod\x18\x04 \x01(\x05R\x03mod\x12\x10\n" +
	"\x03seq\x18\x05 \x01(\x05R\x03seq\x12\x10\n" +
	"\x03ver\x18\x06 \x01(\x05R\x03ver\x12\x14\n" +
	"\x05index\x18\a \x01(\x05R\x05index\x12\x17\n" +
	"\aconn_id\x18\b \x01(\x05R\x06connId\x12\x17\n" +
	"\afrag_id\x18\t \x01(\x05R\x06fragId\x12\x1d\n" +
	"\n" +
	"frag_count\x18\n" +
	" \x01(\x05R\tfragCount\x12\x1d\n" +
	"\n" +
	"frag_index\x18\v \x01(\x05R\tfragIndex\x12\x1a\n" +
	"\bcompress\x18\x14 \x01(\bR\bcompressB\x1aZ\x18api/client/packet;clipktb\x06proto3"

var (
	file_packet_packet_proto_rawDescOnce sync.Once
	file_packet_packet_proto_rawDescData []byte
)

func file_packet_packet_proto_rawDescGZIP() []byte {
	file_packet_packet_proto_rawDescOnce.Do(func() {
		file_packet_packet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_packet_packet_proto_rawDesc), len(file_packet_packet_proto_rawDesc)))
	})
	return file_packet_packet_proto_rawDescData
}

var file_packet_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_packet_packet_proto_goTypes = []any{
	(*Packet)(nil), // 0: packet.Packet
}
var file_packet_packet_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_packet_packet_proto_init() }
func file_packet_packet_proto_init() {
	if File_packet_packet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_packet_packet_proto_rawDesc), len(file_packet_packet_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packet_packet_proto_goTypes,
		DependencyIndexes: file_packet_packet_proto_depIdxs,
		MessageInfos:      file_packet_packet_proto_msgTypes,
	}.Build()
	File_packet_packet_proto = out.File
	file_packet_packet_proto_goTypes = nil
	file_packet_packet_proto_depIdxs = nil
}
