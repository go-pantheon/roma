// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: player/v1/user.proto

package dbv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserProto with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProto with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserProtoMultiError, or nil
// if none found.
func (m *UserProto) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Sid

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for LoginAt

	// no validation rules for LogoutAt

	// no validation rules for LastOnlineAt

	// no validation rules for LastOnlineIp

	// no validation rules for NextDailyResetAt

	// no validation rules for DailyOnlineSeconds

	// no validation rules for TotalOnlineSeconds

	// no validation rules for Version

	// no validation rules for ServerVersion

	if all {
		switch v := interface{}(m.GetDev()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "Dev",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "Dev",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDev()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProtoValidationError{
				field:  "Dev",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSystem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProtoValidationError{
				field:  "System",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlunders()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "Plunders",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "Plunders",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlunders()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProtoValidationError{
				field:  "Plunders",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBasic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "Basic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "Basic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBasic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProtoValidationError{
				field:  "Basic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStorage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProtoValidationError{
				field:  "Storage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeroList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "HeroList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "HeroList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeroList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProtoValidationError{
				field:  "HeroList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProtoValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProtoValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserProtoMultiError(errors)
	}

	return nil
}

// UserProtoMultiError is an error wrapping multiple validation errors returned
// by UserProto.ValidateAll() if the designated constraints aren't met.
type UserProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProtoMultiError) AllErrors() []error { return m }

// UserProtoValidationError is the validation error returned by
// UserProto.Validate if the designated constraints aren't met.
type UserProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProtoValidationError) ErrorName() string { return "UserProtoValidationError" }

// Error satisfies the builtin error interface
func (e UserProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProtoValidationError{}

// Validate checks the field values on UserBasicProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserBasicProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBasicProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserBasicProtoMultiError,
// or nil if none found.
func (m *UserBasicProto) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBasicProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Gender

	if all {
		switch v := interface{}(m.GetRecharge()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserBasicProtoValidationError{
					field:  "Recharge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserBasicProtoValidationError{
					field:  "Recharge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecharge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserBasicProtoValidationError{
				field:  "Recharge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserBasicProtoMultiError(errors)
	}

	return nil
}

// UserBasicProtoMultiError is an error wrapping multiple validation errors
// returned by UserBasicProto.ValidateAll() if the designated constraints
// aren't met.
type UserBasicProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBasicProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBasicProtoMultiError) AllErrors() []error { return m }

// UserBasicProtoValidationError is the validation error returned by
// UserBasicProto.Validate if the designated constraints aren't met.
type UserBasicProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBasicProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBasicProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBasicProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBasicProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBasicProtoValidationError) ErrorName() string { return "UserBasicProtoValidationError" }

// Error satisfies the builtin error interface
func (e UserBasicProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBasicProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBasicProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBasicProtoValidationError{}

// Validate checks the field values on RechargeProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RechargeProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RechargeProtoMultiError, or
// nil if none found.
func (m *RechargeProto) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	if len(errors) > 0 {
		return RechargeProtoMultiError(errors)
	}

	return nil
}

// RechargeProtoMultiError is an error wrapping multiple validation errors
// returned by RechargeProto.ValidateAll() if the designated constraints
// aren't met.
type RechargeProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeProtoMultiError) AllErrors() []error { return m }

// RechargeProtoValidationError is the validation error returned by
// RechargeProto.Validate if the designated constraints aren't met.
type RechargeProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeProtoValidationError) ErrorName() string { return "RechargeProtoValidationError" }

// Error satisfies the builtin error interface
func (e RechargeProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeProtoValidationError{}

// Validate checks the field values on DevProto with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DevProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevProto with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DevProtoMultiError, or nil
// if none found.
func (m *DevProto) ValidateAll() error {
	return m.validate(true)
}

func (m *DevProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeOffset

	if len(errors) > 0 {
		return DevProtoMultiError(errors)
	}

	return nil
}

// DevProtoMultiError is an error wrapping multiple validation errors returned
// by DevProto.ValidateAll() if the designated constraints aren't met.
type DevProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevProtoMultiError) AllErrors() []error { return m }

// DevProtoValidationError is the validation error returned by
// DevProto.Validate if the designated constraints aren't met.
type DevProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevProtoValidationError) ErrorName() string { return "DevProtoValidationError" }

// Error satisfies the builtin error interface
func (e DevProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevProtoValidationError{}

// Validate checks the field values on PlundersProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlundersProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlundersProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlundersProtoMultiError, or
// nil if none found.
func (m *PlundersProto) ValidateAll() error {
	return m.validate(true)
}

func (m *PlundersProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int64, len(m.GetPlunders()))
		i := 0
		for key := range m.GetPlunders() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPlunders()[key]
			_ = val

			// no validation rules for Plunders[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PlundersProtoValidationError{
							field:  fmt.Sprintf("Plunders[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PlundersProtoValidationError{
							field:  fmt.Sprintf("Plunders[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PlundersProtoValidationError{
						field:  fmt.Sprintf("Plunders[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PlundersProtoMultiError(errors)
	}

	return nil
}

// PlundersProtoMultiError is an error wrapping multiple validation errors
// returned by PlundersProto.ValidateAll() if the designated constraints
// aren't met.
type PlundersProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlundersProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlundersProtoMultiError) AllErrors() []error { return m }

// PlundersProtoValidationError is the validation error returned by
// PlundersProto.Validate if the designated constraints aren't met.
type PlundersProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlundersProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlundersProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlundersProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlundersProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlundersProtoValidationError) ErrorName() string { return "PlundersProtoValidationError" }

// Error satisfies the builtin error interface
func (e PlundersProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlundersProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlundersProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlundersProtoValidationError{}

// Validate checks the field values on PlunderStateProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlunderStateProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlunderStateProto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlunderStateProtoMultiError, or nil if none found.
func (m *PlunderStateProto) ValidateAll() error {
	return m.validate(true)
}

func (m *PlunderStateProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Weights

	if len(errors) > 0 {
		return PlunderStateProtoMultiError(errors)
	}

	return nil
}

// PlunderStateProtoMultiError is an error wrapping multiple validation errors
// returned by PlunderStateProto.ValidateAll() if the designated constraints
// aren't met.
type PlunderStateProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlunderStateProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlunderStateProtoMultiError) AllErrors() []error { return m }

// PlunderStateProtoValidationError is the validation error returned by
// PlunderStateProto.Validate if the designated constraints aren't met.
type PlunderStateProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlunderStateProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlunderStateProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlunderStateProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlunderStateProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlunderStateProtoValidationError) ErrorName() string {
	return "PlunderStateProtoValidationError"
}

// Error satisfies the builtin error interface
func (e PlunderStateProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlunderStateProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlunderStateProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlunderStateProtoValidationError{}
