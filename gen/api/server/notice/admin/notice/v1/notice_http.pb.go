// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: notice/admin/notice/v1/notice.proto

package adminv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNoticeAdminCreate = "/notice.admin.notice.v1.NoticeAdmin/Create"
const OperationNoticeAdminDelete = "/notice.admin.notice.v1.NoticeAdmin/Delete"
const OperationNoticeAdminGetById = "/notice.admin.notice.v1.NoticeAdmin/GetById"
const OperationNoticeAdminGetList = "/notice.admin.notice.v1.NoticeAdmin/GetList"
const OperationNoticeAdminUpdate = "/notice.admin.notice.v1.NoticeAdmin/Update"

type NoticeAdminHTTPServer interface {
	// Create Create notice
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Delete Delete notice
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// GetById Query notice by id
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	// GetList Query notice page list
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	// Update Update notice
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
}

func RegisterNoticeAdminHTTPServer(s *http.Server, srv NoticeAdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/notices/list", _NoticeAdmin_GetList0_HTTP_Handler(srv))
	r.GET("/admin/notices/{id}", _NoticeAdmin_GetById0_HTTP_Handler(srv))
	r.POST("/admin/notices/create", _NoticeAdmin_Create0_HTTP_Handler(srv))
	r.PUT("/admin/notices/{id}", _NoticeAdmin_Update0_HTTP_Handler(srv))
	r.DELETE("/admin/notices/{id}", _NoticeAdmin_Delete0_HTTP_Handler(srv))
}

func _NoticeAdmin_GetList0_HTTP_Handler(srv NoticeAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeAdminGetList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetList(ctx, req.(*GetListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetListResponse)
		return ctx.Result(200, reply)
	}
}

func _NoticeAdmin_GetById0_HTTP_Handler(srv NoticeAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeAdminGetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetById(ctx, req.(*GetByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _NoticeAdmin_Create0_HTTP_Handler(srv NoticeAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeAdminCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*CreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateResponse)
		return ctx.Result(200, reply)
	}
}

func _NoticeAdmin_Update0_HTTP_Handler(srv NoticeAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeAdminUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*UpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _NoticeAdmin_Delete0_HTTP_Handler(srv NoticeAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeAdminDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*DeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResponse)
		return ctx.Result(200, reply)
	}
}

type NoticeAdminHTTPClient interface {
	Create(ctx context.Context, req *CreateRequest, opts ...http.CallOption) (rsp *CreateResponse, err error)
	Delete(ctx context.Context, req *DeleteRequest, opts ...http.CallOption) (rsp *DeleteResponse, err error)
	GetById(ctx context.Context, req *GetByIdRequest, opts ...http.CallOption) (rsp *GetByIdResponse, err error)
	GetList(ctx context.Context, req *GetListRequest, opts ...http.CallOption) (rsp *GetListResponse, err error)
	Update(ctx context.Context, req *UpdateRequest, opts ...http.CallOption) (rsp *UpdateResponse, err error)
}

type NoticeAdminHTTPClientImpl struct {
	cc *http.Client
}

func NewNoticeAdminHTTPClient(client *http.Client) NoticeAdminHTTPClient {
	return &NoticeAdminHTTPClientImpl{client}
}

func (c *NoticeAdminHTTPClientImpl) Create(ctx context.Context, in *CreateRequest, opts ...http.CallOption) (*CreateResponse, error) {
	var out CreateResponse
	pattern := "/admin/notices/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNoticeAdminCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NoticeAdminHTTPClientImpl) Delete(ctx context.Context, in *DeleteRequest, opts ...http.CallOption) (*DeleteResponse, error) {
	var out DeleteResponse
	pattern := "/admin/notices/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoticeAdminDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NoticeAdminHTTPClientImpl) GetById(ctx context.Context, in *GetByIdRequest, opts ...http.CallOption) (*GetByIdResponse, error) {
	var out GetByIdResponse
	pattern := "/admin/notices/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoticeAdminGetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NoticeAdminHTTPClientImpl) GetList(ctx context.Context, in *GetListRequest, opts ...http.CallOption) (*GetListResponse, error) {
	var out GetListResponse
	pattern := "/admin/notices/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoticeAdminGetList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NoticeAdminHTTPClientImpl) Update(ctx context.Context, in *UpdateRequest, opts ...http.CallOption) (*UpdateResponse, error) {
	var out UpdateResponse
	pattern := "/admin/notices/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNoticeAdminUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
