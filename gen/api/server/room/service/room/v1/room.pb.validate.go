// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: room/service/room/v1/room.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetByIdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByIdRequestMultiError,
// or nil if none found.
func (m *GetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetByIdRequestMultiError(errors)
	}

	return nil
}

// GetByIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIdRequestMultiError) AllErrors() []error { return m }

// GetByIdRequestValidationError is the validation error returned by
// GetByIdRequest.Validate if the designated constraints aren't met.
type GetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIdRequestValidationError) ErrorName() string { return "GetByIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIdRequestValidationError{}

// Validate checks the field values on GetByIdResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByIdResponseMultiError, or nil if none found.
func (m *GetByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByIdResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByIdResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByIdResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByIdResponseMultiError(errors)
	}

	return nil
}

// GetByIdResponseMultiError is an error wrapping multiple validation errors
// returned by GetByIdResponse.ValidateAll() if the designated constraints
// aren't met.
type GetByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIdResponseMultiError) AllErrors() []error { return m }

// GetByIdResponseValidationError is the validation error returned by
// GetByIdResponse.Validate if the designated constraints aren't met.
type GetByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIdResponseValidationError) ErrorName() string { return "GetByIdResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIdResponseValidationError{}

// Validate checks the field values on ListByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByIdRequestMultiError, or nil if none found.
func (m *ListByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListByIdRequestMultiError(errors)
	}

	return nil
}

// ListByIdRequestMultiError is an error wrapping multiple validation errors
// returned by ListByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type ListByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByIdRequestMultiError) AllErrors() []error { return m }

// ListByIdRequestValidationError is the validation error returned by
// ListByIdRequest.Validate if the designated constraints aren't met.
type ListByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByIdRequestValidationError) ErrorName() string { return "ListByIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByIdRequestValidationError{}

// Validate checks the field values on ListByIdResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByIdResponseMultiError, or nil if none found.
func (m *ListByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	{
		sorted_keys := make([]int64, len(m.GetRooms()))
		i := 0
		for key := range m.GetRooms() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRooms()[key]
			_ = val

			// no validation rules for Rooms[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListByIdResponseValidationError{
							field:  fmt.Sprintf("Rooms[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListByIdResponseValidationError{
							field:  fmt.Sprintf("Rooms[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListByIdResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListByIdResponseMultiError(errors)
	}

	return nil
}

// ListByIdResponseMultiError is an error wrapping multiple validation errors
// returned by ListByIdResponse.ValidateAll() if the designated constraints
// aren't met.
type ListByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByIdResponseMultiError) AllErrors() []error { return m }

// ListByIdResponseValidationError is the validation error returned by
// ListByIdResponse.Validate if the designated constraints aren't met.
type ListByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByIdResponseValidationError) ErrorName() string { return "ListByIdResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByIdResponseValidationError{}

// Validate checks the field values on RoomCacheProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomCacheProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomCacheProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomCacheProtoMultiError,
// or nil if none found.
func (m *RoomCacheProto) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomCacheProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IdStr

	// no validation rules for Account

	// no validation rules for Name

	// no validation rules for CreatedTime

	// no validation rules for LoginTime

	// no validation rules for LastOnlineTime

	// no validation rules for LastOnlineIp

	// no validation rules for Detail

	if len(errors) > 0 {
		return RoomCacheProtoMultiError(errors)
	}

	return nil
}

// RoomCacheProtoMultiError is an error wrapping multiple validation errors
// returned by RoomCacheProto.ValidateAll() if the designated constraints
// aren't met.
type RoomCacheProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomCacheProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomCacheProtoMultiError) AllErrors() []error { return m }

// RoomCacheProtoValidationError is the validation error returned by
// RoomCacheProto.Validate if the designated constraints aren't met.
type RoomCacheProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomCacheProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomCacheProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomCacheProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomCacheProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomCacheProtoValidationError) ErrorName() string { return "RoomCacheProtoValidationError" }

// Error satisfies the builtin error interface
func (e RoomCacheProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomCacheProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomCacheProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomCacheProtoValidationError{}
