// Code generated by gen-datas. DO NOT EDIT.

package gamedata

import (
	hero_base "github.com/go-pantheon/roma/gen/gamedata/base/hero"
	"github.com/pkg/errors"
)

var _ = errors.New("import holding")

// HeroLevelDatas excel/Hero/hero.xlsx:Level
type HeroLevelDatas struct {
	List []*HeroLevelData
	Map  map[int64]*HeroLevelData
}

// HeroLevelDataGen excel/Hero/hero.xlsx:Level
type HeroLevelDataGen struct {
	*hero_base.LevelDataBaseGen

	SubDataList []*HeroLevelSubDataGen
	SubDataMap  map[int64]*HeroLevelSubDataGen
}

type HeroLevelSubDataGen struct {
	*hero_base.LevelSubDataBaseGen

	CostCosts       *Costs
	PrizePackPrizes *PackPrizes
}

func newHeroLevelDatas(bases *hero_base.LevelDataBaseGens) (*HeroLevelDatas, error) {
	ds := &HeroLevelDatas{
		List: make([]*HeroLevelData, 0, len(bases.DataBases)),
		Map:  make(map[int64]*HeroLevelData, len(bases.DataBases)),
	}
	for _, base := range bases.DataBases {
		d, err := newHeroLevelData(base)
		if err != nil {
			return nil, err
		}
		ds.List = append(ds.List, d)
		ds.Map[d.ID] = d
	}
	return ds, nil
}

func newHeroLevelData(base *hero_base.LevelDataBaseGen) (d *HeroLevelData, err error) {
	d = &HeroLevelData{}

	d.HeroLevelDataGen, err = newHeroLevelDataGen(base)
	if err != nil {
		return nil, err
	}
	return d, nil
}

func newHeroLevelDataGen(base *hero_base.LevelDataBaseGen) (d *HeroLevelDataGen, err error) {
	d = &HeroLevelDataGen{
		LevelDataBaseGen: base,

		SubDataList: make([]*HeroLevelSubDataGen, 0, len(base.SubDatas)),
		SubDataMap:  make(map[int64]*HeroLevelSubDataGen, len(base.SubDatas)),
	}

	for _, o := range base.SubDatas {
		sd, err := newHeroLevelSubDataGen(o)
		if err != nil {
			return nil, err
		}
		d.SubDataList = append(d.SubDataList, sd)
		d.SubDataMap[sd.Level] = sd
	}

	return d, nil
}

func newHeroLevelSubDataGen(base *hero_base.LevelSubDataBaseGen) (d *HeroLevelSubDataGen, err error) {
	d = &HeroLevelSubDataGen{
		LevelSubDataBaseGen: base,
	}
	return d, nil
}

func (ds *HeroLevelDatas) init() error {
	for _, d := range ds.List {
		if err := d.init(); err != nil {
			return err
		}
	}
	return nil
}

func (ds *HeroLevelDatas) build() {
	for _, d := range ds.List {
		d.build()
	}
}

func (d *HeroLevelDataGen) build() {

	for _, sd := range d.SubDataList {
		sd.build()
	}
}

func (d *HeroLevelSubDataGen) build() {
	if v, err := TryNewCosts(d.Cost); err != nil {
		panic(errors.WithMessagef(err, "File:%s Id=%d", d.Table(), d.Id()))
	} else {
		d.CostCosts = v
	}
	if v, err := TryNewPackPrizes(d.Prize); err != nil {
		panic(errors.WithMessagef(err, "File:%s Id=%d", d.Table(), d.Id()))
	} else {
		d.PrizePackPrizes = v
	}
}

func (d *HeroLevelDataGen) init() error {
	return nil
}
