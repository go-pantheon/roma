// Code generated by gen-datas. DO NOT EDIT.

package gamedata

import (
	hero_base "github.com/vulcan-frame/vulcan-game/gen/gamedata/base/hero"
	"github.com/pkg/errors"
)

var _ = errors.New("import holding")

// HeroBaseDatas excel/Hero/hero.xlsx:Base
type HeroBaseDatas struct {
	List []*HeroBaseData
	Map  map[int64]*HeroBaseData
}

// HeroBaseDataGen excel/Hero/hero.xlsx:Base
type HeroBaseDataGen struct {
	*hero_base.BaseDataBaseGen

	LevelData *HeroLevelData

	SkillDataList []*HeroSkillData

	CostCosts *Costs
}

func newHeroBaseDatas(bases *hero_base.BaseDataBaseGens) (*HeroBaseDatas, error) {
	ds := &HeroBaseDatas{
		List: make([]*HeroBaseData, 0, len(bases.DataBases)),
		Map:  make(map[int64]*HeroBaseData, len(bases.DataBases)),
	}
	for _, base := range bases.DataBases {
		d, err := newHeroBaseData(base)
		if err != nil {
			return nil, err
		}
		ds.List = append(ds.List, d)
		ds.Map[d.ID] = d
	}
	return ds, nil
}

func newHeroBaseData(base *hero_base.BaseDataBaseGen) (d *HeroBaseData, err error) {
	d = &HeroBaseData{}

	d.HeroBaseDataGen, err = newHeroBaseDataGen(base)
	if err != nil {
		return nil, err
	}
	return d, nil
}

func newHeroBaseDataGen(base *hero_base.BaseDataBaseGen) (d *HeroBaseDataGen, err error) {
	d = &HeroBaseDataGen{
		BaseDataBaseGen: base,
	}

	return d, nil
}

func (ds *HeroBaseDatas) init() error {
	for _, d := range ds.List {
		if err := d.init(); err != nil {
			return err
		}
	}
	return nil
}

func (ds *HeroBaseDatas) build() {
	for _, d := range ds.List {
		d.build()
	}
}

func (d *HeroBaseDataGen) build() {
	d.LevelData = GetHeroLevelData(d.Level)

	for _, id := range d.Skill {
		d.SkillDataList = append(d.SkillDataList, GetHeroSkillData(id))
	}

	if v, err := TryNewCosts(d.Cost); err != nil {
		panic(errors.WithMessagef(err, "File:%s Id=%d", d.Table(), d.Id()))
	} else {
		d.CostCosts = v
	}

}

func (d *HeroBaseDataGen) init() error {
	return nil
}
