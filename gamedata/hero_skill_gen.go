// Code generated by gen-datas. DO NOT EDIT.

package gamedata

import (
	hero_base "github.com/go-pantheon/roma/gen/gamedata/base/hero"
	"github.com/pkg/errors"
)

var _ = errors.New("import holding")

// HeroSkillDatas excel/Hero/hero.xlsx:Skill
type HeroSkillDatas struct {
	List []*HeroSkillData
	Map  map[int64]*HeroSkillData
}

// HeroSkillDataGen excel/Hero/hero.xlsx:Skill
type HeroSkillDataGen struct {
	*hero_base.SkillDataBaseGen

	SubDataList []*HeroSkillSubDataGen
	SubDataMap  map[int64]*HeroSkillSubDataGen
}

type HeroSkillSubDataGen struct {
	*hero_base.SkillSubDataBaseGen
}

func newHeroSkillDatas(bases *hero_base.SkillDataBaseGens) (*HeroSkillDatas, error) {
	ds := &HeroSkillDatas{
		List: make([]*HeroSkillData, 0, len(bases.DataBases)),
		Map:  make(map[int64]*HeroSkillData, len(bases.DataBases)),
	}
	for _, base := range bases.DataBases {
		d, err := newHeroSkillData(base)
		if err != nil {
			return nil, err
		}
		ds.List = append(ds.List, d)
		ds.Map[d.ID] = d
	}
	return ds, nil
}

func newHeroSkillData(base *hero_base.SkillDataBaseGen) (d *HeroSkillData, err error) {
	d = &HeroSkillData{}

	d.HeroSkillDataGen, err = newHeroSkillDataGen(base)
	if err != nil {
		return nil, err
	}
	return d, nil
}

func newHeroSkillDataGen(base *hero_base.SkillDataBaseGen) (d *HeroSkillDataGen, err error) {
	d = &HeroSkillDataGen{
		SkillDataBaseGen: base,

		SubDataList: make([]*HeroSkillSubDataGen, 0, len(base.SubDatas)),
		SubDataMap:  make(map[int64]*HeroSkillSubDataGen, len(base.SubDatas)),
	}

	for _, o := range base.SubDatas {
		sd, err := newHeroSkillSubDataGen(o)
		if err != nil {
			return nil, err
		}
		d.SubDataList = append(d.SubDataList, sd)
		d.SubDataMap[sd.Level] = sd
	}

	return d, nil
}

func newHeroSkillSubDataGen(base *hero_base.SkillSubDataBaseGen) (d *HeroSkillSubDataGen, err error) {
	d = &HeroSkillSubDataGen{
		SkillSubDataBaseGen: base,
	}
	return d, nil
}

func (ds *HeroSkillDatas) init() error {
	for _, d := range ds.List {
		if err := d.init(); err != nil {
			return err
		}
	}
	return nil
}

func (ds *HeroSkillDatas) build() {
	for _, d := range ds.List {
		d.build()
	}
}

func (d *HeroSkillDataGen) build() {

	for _, sd := range d.SubDataList {
		sd.build()
	}
}

func (d *HeroSkillSubDataGen) build() {
}

func (d *HeroSkillDataGen) init() error {
	return nil
}
