// Code generated by gen-datas. DO NOT EDIT.

package gamedata

import (
	resource_base "github.com/go-pantheon/roma/gen/gamedata/base/resource"
	"github.com/pkg/errors"
)

var _ = errors.New("import holding")

// ResourceItemDatas excel/Resource/item.xlsx:Item
type ResourceItemDatas struct {
	List []*ResourceItemData
	Map  map[int64]*ResourceItemData
}

// ResourceItemDataGen excel/Resource/item.xlsx:Item
type ResourceItemDataGen struct {
	*resource_base.ItemDataBaseGen
}

func newResourceItemDatas(bases *resource_base.ItemDataBaseGens) (*ResourceItemDatas, error) {
	ds := &ResourceItemDatas{
		List: make([]*ResourceItemData, 0, len(bases.DataBases)),
		Map:  make(map[int64]*ResourceItemData, len(bases.DataBases)),
	}
	for _, base := range bases.DataBases {
		d, err := newResourceItemData(base)
		if err != nil {
			return nil, err
		}
		ds.List = append(ds.List, d)
		ds.Map[d.ID] = d
	}
	return ds, nil
}

func newResourceItemData(base *resource_base.ItemDataBaseGen) (d *ResourceItemData, err error) {
	d = &ResourceItemData{}

	d.ResourceItemDataGen, err = newResourceItemDataGen(base)
	if err != nil {
		return nil, err
	}
	return d, nil
}

func newResourceItemDataGen(base *resource_base.ItemDataBaseGen) (d *ResourceItemDataGen, err error) {
	d = &ResourceItemDataGen{
		ItemDataBaseGen: base,
	}

	return d, nil
}

func (ds *ResourceItemDatas) init() error {
	for _, d := range ds.List {
		if err := d.init(); err != nil {
			return err
		}
	}
	return nil
}

func (ds *ResourceItemDatas) build() {
	for _, d := range ds.List {
		d.build()
	}
}

func (d *ResourceItemDataGen) build() {

}

func (d *ResourceItemDataGen) init() error {
	return nil
}
