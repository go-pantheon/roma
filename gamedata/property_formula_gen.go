// Code generated by gen-datas. DO NOT EDIT.

package gamedata

import (
	property_base "github.com/go-pantheon/roma/gen/gamedata/base/property"
	"github.com/pkg/errors"
)

var _ = errors.New("import holding")

// PropertyFormulaDatas excel/Property/Attribute.xlsx:Formula
type PropertyFormulaDatas struct {
	List []*PropertyFormulaData
	Map  map[int64]*PropertyFormulaData
}

// PropertyFormulaDataGen excel/Property/Attribute.xlsx:Formula
type PropertyFormulaDataGen struct {
	*property_base.FormulaDataBaseGen
}

func newPropertyFormulaDatas(bases *property_base.FormulaDataBaseGens) (*PropertyFormulaDatas, error) {
	ds := &PropertyFormulaDatas{
		List: make([]*PropertyFormulaData, 0, len(bases.DataBases)),
		Map:  make(map[int64]*PropertyFormulaData, len(bases.DataBases)),
	}
	for _, base := range bases.DataBases {
		d, err := newPropertyFormulaData(base)
		if err != nil {
			return nil, err
		}
		ds.List = append(ds.List, d)
		ds.Map[d.ID] = d
	}
	return ds, nil
}

func newPropertyFormulaData(base *property_base.FormulaDataBaseGen) (d *PropertyFormulaData, err error) {
	d = &PropertyFormulaData{}

	d.PropertyFormulaDataGen, err = newPropertyFormulaDataGen(base)
	if err != nil {
		return nil, err
	}
	return d, nil
}

func newPropertyFormulaDataGen(base *property_base.FormulaDataBaseGen) (d *PropertyFormulaDataGen, err error) {
	d = &PropertyFormulaDataGen{
		FormulaDataBaseGen: base,
	}

	return d, nil
}

func (ds *PropertyFormulaDatas) init() error {
	for _, d := range ds.List {
		if err := d.init(); err != nil {
			return err
		}
	}
	return nil
}

func (ds *PropertyFormulaDatas) build() {
	for _, d := range ds.List {
		d.build()
	}
}

func (d *PropertyFormulaDataGen) build() {

}

func (d *PropertyFormulaDataGen) init() error {
	return nil
}
