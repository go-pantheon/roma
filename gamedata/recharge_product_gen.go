// Code generated by gen-datas. DO NOT EDIT.

package gamedata

import (
	recharge_base "github.com/vulcan-frame/vulcan-game/gen/gamedata/base/recharge"
	"github.com/pkg/errors"
)

var _ = errors.New("import holding")

// RechargeProductDatas excel/Recharge/Recharge.xlsx:Product
type RechargeProductDatas struct {
	List []*RechargeProductData
	Map  map[int64]*RechargeProductData
}

// RechargeProductDataGen excel/Recharge/Recharge.xlsx:Product
type RechargeProductDataGen struct {
	*recharge_base.ProductDataBaseGen
}

func newRechargeProductDatas(bases *recharge_base.ProductDataBaseGens) (*RechargeProductDatas, error) {
	ds := &RechargeProductDatas{
		List: make([]*RechargeProductData, 0, len(bases.DataBases)),
		Map:  make(map[int64]*RechargeProductData, len(bases.DataBases)),
	}
	for _, base := range bases.DataBases {
		d, err := newRechargeProductData(base)
		if err != nil {
			return nil, err
		}
		ds.List = append(ds.List, d)
		ds.Map[d.ID] = d
	}
	return ds, nil
}

func newRechargeProductData(base *recharge_base.ProductDataBaseGen) (d *RechargeProductData, err error) {
	d = &RechargeProductData{}

	d.RechargeProductDataGen, err = newRechargeProductDataGen(base)
	if err != nil {
		return nil, err
	}
	return d, nil
}

func newRechargeProductDataGen(base *recharge_base.ProductDataBaseGen) (d *RechargeProductDataGen, err error) {
	d = &RechargeProductDataGen{
		ProductDataBaseGen: base,
	}

	return d, nil
}

func (ds *RechargeProductDatas) init() error {
	for _, d := range ds.List {
		if err := d.init(); err != nil {
			return err
		}
	}
	return nil
}

func (ds *RechargeProductDatas) build() {
	for _, d := range ds.List {
		d.build()
	}
}

func (d *RechargeProductDataGen) build() {

}

func (d *RechargeProductDataGen) init() error {
	return nil
}
